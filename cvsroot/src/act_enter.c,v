head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2003.05.26.16.29.01;	author boogums;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.26.16.24.29;	author boogums;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.26.16.18.49;	author boogums;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.25.17.51.39;	author boogums;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.25.14.32.21;	author boogums;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.25.01.34.22;	author boogums;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.21.20.20.57;	author rage;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.04.15.54.46;	author guerrand;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.18.00.03.38;	author mud;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.17.15.41.17;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.18.20.14.47;	author mud;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.18.19.50.50;	author mud;	state Exp;
branches;
next	1.9;

1.9
date	99.08.23.03.34.39;	author mud;	state Exp;
branches;
next	1.8;

1.8
date	99.07.14.18.13.24;	author mud;	state Exp;
branches;
next	1.7;

1.7
date	99.06.17.15.36.07;	author mud;	state Exp;
branches;
next	1.6;

1.6
date	99.04.23.23.43.35;	author mud;	state Exp;
branches;
next	1.5;

1.5
date	99.04.17.22.54.30;	author mud;	state Exp;
branches;
next	1.4;

1.4
date	99.04.17.09.27.11;	author mud;	state Exp;
branches;
next	1.3;

1.3
date	98.11.22.08.04.39;	author mud;	state Exp;
branches;
next	1.2;

1.2
date	98.10.05.09.10.24;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	98.06.16.17.49.12;	author mud;	state Exp;
branches;
next	;


desc
@@


1.21
log
@t ok bug fixed
corey
@
text
@/***************************************************************************
 *  Original Diku Mud copyright (C) 1990, 1991 by Sebastian Hammer,        *
 *  Michael Seifert, Hans Henrik St{rfeldt, Tom Madsen, and Katja Nyboe.   *
 *                                                                         *
 *  Merc Diku Mud improvments copyright (C) 1992, 1993 by Michael          *
 *  Chastain, Michael Quan, and Mitchell Tse.                              *
 *                                                                         *
 *  In order to use any part of this Merc Diku Mud, you must comply with   *
 *  both the original Diku license in 'license.doc' as well the Merc       *
 *  license in 'license.txt'.  In particular, you may not remove either of *
 *  these copyright notices.                                               *
 *                                                                         *
 *  Much time and thought has gone into this software and you are          *
 *  benefitting.  We hope that you share your changes too.  What goes      *
 *  around, comes around.                                                  *
 ***************************************************************************/

static char rcsid[] = "$Id: act_enter.c,v 1.20 2003/05/26 16:24:29 boogums Exp $";
#if defined(macintosh)
#include <types.h>
#include <time.h>
#else
#include <sys/types.h>
#include <sys/time.h>
#endif
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "merc.h"

/* command procedures needed */
DECLARE_DO_FUN(do_look		);
DECLARE_DO_FUN(do_stand		);

/* random room generation procedure */
ROOM_INDEX_DATA  *get_random_room(CHAR_DATA *ch)
{
    ROOM_INDEX_DATA *room;

    for ( ; ; )
    {
        room = get_room_index( number_range( 0, 65535 ) );
        if ( room != NULL )
        if ( can_see_room(ch,room)
	&&   is_room_clan(ch,room)
	&&   !room_is_private(ch,room)
        &&   !IS_SET(room->room_flags, ROOM_PRIVATE)
        &&   !IS_SET(room->room_flags, ROOM_SOLITARY) 
	&&   !IS_SET(room->room_flags, ROOM_SAFE) 
        &&   !IS_SET(room->room_flags,ROOM_LAW)
        &&   !room->area->under_develop
	&&   !room->area->no_transport )
            break;
    }

    return room;
}

ROOM_INDEX_DATA *get_random_room_obj(void)
{
	ROOM_INDEX_DATA *room;
        
	for ( ; ; )
  	{
	  room = get_room_index( number_range(0, 65535 ));
          if(room != NULL)
	  if(   !IS_SET(room->room_flags, ROOM_PRIVATE)
	     && !IS_SET(room->room_flags, ROOM_SOLITARY)
	     && !IS_SET(room->room_flags, ROOM_LAW)
	     && !IS_SET(room->room_flags, ROOM_SAFE)
	     && !room->area->under_develop
	     && !room->area->no_transport )
		break;
        }
        
        return room;
}


/*MM entering Clan halls*/
void do_enter( CHAR_DATA *ch, char *argument)
{    
    ROOM_INDEX_DATA *location; 

    if ( ch->fighting != NULL ) return;

    /* nifty portal stuff */
    if (argument[0] != '\0' && str_prefix(argument,"clan"))
    {
        ROOM_INDEX_DATA *old_room;
	OBJ_DATA *portal;
	CHAR_DATA *fch, *fch_next;

        old_room = ch->in_room;

	portal = get_obj_list( ch, argument,  ch->in_room->contents );
	
	if (portal == NULL)
	{
	    send_to_char("You don't see that here.\n\r",ch);
	    return;
	}
        
	if ( !IS_NPC(ch) && ch->in_room->clan && IS_SET(ch->pcdata->clan_flags, CLAN_NO_PORTALS))
	{
	send_to_char("You have been forbidden to use the clan portals.\n\r", ch);
	return;
	}

	if (portal->item_type != ITEM_PORTAL 
        ||  (IS_SET(portal->value[1],EX_CLOSED) && !IS_TRUSTED(ch,ANGEL)))
	{
	    send_to_char("You can't seem to find a way in.\n\r",ch);
	    return;
	}

	if (!IS_TRUSTED(ch,ANGEL) && !IS_SET(portal->value[2],GATE_NOCURSE)
	//&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || is_affected(ch,gsn_morph) )
        && (  ( IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB) )
	||   IS_SET(old_room->room_flags,ROOM_NO_RECALL)))
	{
	    send_to_char("Something prevents you from leaving...\n\r",ch);
	    return;
	}

	if (IS_SET(portal->value[2],GATE_RANDOM) || portal->value[3] == -1)
	{
	    location = get_random_room(ch);
	    portal->value[3] = location->vnum; /* for record keeping :) */
	}
	else if (IS_SET(portal->value[2],GATE_BUGGY) && (number_percent() < 5))
	    location = get_random_room(ch);
	else
	    location = get_room_index(portal->value[3]);

	if (location == NULL
	||  location == old_room
	||  !can_see_room(ch,location) 
	||  !is_room_clan(ch,location)
	||  (room_is_private(ch,location) && !IS_TRUSTED(ch,IMPLEMENTOR)))
	{
	   act("$p doesn't seem to go anywhere.",ch,portal,NULL,TO_CHAR,FALSE);
	   return;
	}

        if (IS_NPC(ch) && IS_SET(ch->act,ACT_AGGRESSIVE)
        &&  IS_SET(location->room_flags,ROOM_LAW))
        {
            send_to_char("Something prevents you from leaving...\n\r",ch);
            return;
        }

	if ( ch->invis_level < 51 )
	    act("$n steps into $p.",ch,portal,NULL,TO_ROOM,FALSE);
	
        if (IS_SET(ch->mhs,MHS_HIGHLANDER))
	{
           for (fch = ch->in_room->people; fch != NULL; fch = fch_next)
           {
              fch_next = fch->next_in_room;
	      if (IS_SET(fch->mhs,MHS_HIGHLANDER) && fch != ch)
	      {
	         send_to_char("The tingle in your neck stops and the presence of the other Highlander is gone.\n\r",fch);
	      }
	   }
	}

	if (IS_SET(portal->value[2],GATE_NORMAL_EXIT))
	    act("You enter $p.",ch,portal,NULL,TO_CHAR,FALSE);
	else
	    act("You walk through $p and find yourself somewhere else...",
	        ch,portal,NULL,TO_CHAR,FALSE); 

	char_from_room(ch);
	char_to_room(ch, location);
	if ( is_mounted(ch) )
	{
	    char_from_room( ch->riding );
	    char_to_room( ch->riding, location );
	}
	else
	if ( ch->passenger != NULL )
	{
	    char_from_room( ch->passenger );
	    char_to_room( ch->passenger, location );
 	}

	if (IS_SET(portal->value[2],GATE_GOWITH)) /* take the gate along */
	{
	    obj_from_room(portal);
	    obj_to_room(portal,location);
	}


        if (IS_SET(ch->mhs,MHS_HIGHLANDER))
	{
           for (fch = ch->in_room->people; fch != NULL; fch = fch_next)
           {
              fch_next = fch->next_in_room;
	      if (IS_SET(fch->mhs,MHS_HIGHLANDER) && fch != ch)
	      {
	         send_to_char("Your neck tingles as you feel the presence of another Highlander.\n\r",fch);
	      }
	   }
	}

	if (ch->invis_level < 51 )
	{
	if (IS_SET(portal->value[2],GATE_NORMAL_EXIT))
	    act("$n has arrived.",ch,portal,NULL,TO_ROOM,FALSE);
	else
	    act("$n has arrived through $p.",ch,portal,NULL,TO_ROOM,FALSE);
	}

	do_look(ch,"auto");

	/* charges */
	if (portal->value[0] > 0)
	{
	    portal->value[0]--;
	    if (portal->value[0] == 0)
		portal->value[0] = -1;
	}

	/* protect against circular follows */
	if (old_room == location)
	    return;

    	for ( fch = old_room->people; fch != NULL; fch = fch_next )
    	{
            fch_next = fch->next_in_room;

            if (portal == NULL || portal->value[0] == -1) 
	    /* no following through dead portals */
                continue;
 
            if ( fch->master == ch && IS_AFFECTED(fch,AFF_CHARM)
            &&   fch->position < POS_STANDING)
            	do_stand(fch,"");

            if ( fch->master == ch && fch->position == POS_STANDING)
            {
 
                if (IS_SET(ch->in_room->room_flags,ROOM_LAW)
                &&  (IS_NPC(fch) && IS_SET(fch->act,ACT_AGGRESSIVE)))
                {
                    act("You can't bring $N into the city.",
                    	ch,NULL,fch,TO_CHAR,FALSE);
                    act("You aren't allowed in the city.",
                    	fch,NULL,NULL,TO_CHAR,FALSE);
                    continue;
            	}
 
            	act( "You follow $N.", fch, NULL, ch, TO_CHAR,FALSE );
		do_enter(fch,argument);
            }
    	}

 	if (portal != NULL && portal->value[0] == -1)
	{
	    act("$p fades out of existence.",ch,portal,NULL,TO_CHAR,FALSE);
	    if (ch->in_room == old_room)
		act("$p fades out of existence.",ch,portal,NULL,TO_ROOM,FALSE);
	    else if (old_room->people != NULL)
	    {
		act("$p fades out of existence.", 
		    old_room->people,portal,NULL,TO_CHAR,FALSE);
		act("$p fades out of existence.",
		    old_room->people,portal,NULL,TO_ROOM,FALSE);
	    }
	    extract_obj(portal);
	}
	return;
    }

    send_to_char("Nope, can't do it.\n\r",ch);
    return;
}
@


1.20
log
@fixed i think
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.19 2003/05/26 16:18:49 boogums Exp $";
d118 2
a119 2
	&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || (!IS_NPC(ch) && is_affected(ch,gsn_morph)) )
        //&& (  ( IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB) )
@


1.19
log
@checking portals now
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.18 2003/05/25 17:51:39 boogums Exp $";
d118 2
a119 2
	//&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || is_affected(ch,gsn_morph))
        && (  ( IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB) )
@


1.18
log
@damn act_enter
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.17 2003/05/25 14:32:21 boogums Exp $";
d118 2
a119 1
	&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || is_affected(ch,gsn_morph))
@


1.17
log
@DOH damn bitvecotrs :)
orey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.16 2003/05/25 01:34:22 boogums Exp $";
d118 1
a118 1
	&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || IS_SET(ch->mhs,MHS_CURSE))
@


1.16
log
@ok adding MHS_CURSE
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.15 2002/05/21 20:20:57 rage Exp $";
d118 1
a118 1
	&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB || IS_AFFECTED(ch,MHS_CURSE))
@


1.15
log
@dropped potion costs for alchemy
added randomly teleporting portal for Slodhain area
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.14 2001/08/04 15:54:46 guerrand Exp $";
d118 1
a118 1
	&&  (IS_AFFECTED(ch,AFF_CURSE)  || IS_SET(ch->act,PLR_DWEEB)
@


1.14
log
@IMMs no longer show up when wizi and entering portals.
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.13 2000/08/18 00:03:38 mud Exp $";
d58 21
@


1.13
log
@o charmies dont crash through portals with clan sanctions
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.12 2000/08/17 15:41:17 mud Exp $";
d131 2
a132 1
	act("$n steps into $p.",ch,portal,NULL,TO_ROOM,FALSE);
d185 2
d191 1
@


1.12
log
@ more implementation of sanction command
 finished all but no_clan_skill
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.11 2000/04/18 20:14:47 mud Exp $";
d83 1
a83 1
	if ( ch->in_room->clan && IS_SET(ch->pcdata->clan_flags, CLAN_NO_PORTALS))
@


1.11
log
@typo fix
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.10 2000/04/18 19:50:50 mud Exp $";
d81 6
@


1.10
log
@added a BOOL ooc as an extra arg to act() and act_new() to have it
deal properly with the BOOL in can_see() and PERS().
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.9 1999/08/23 03:34:39 mud Exp $";
d235 1
a235 1
		    old_room->people,portal,NULL,TO_CHAR),FALSE;
@


1.9
log
@Son of a bitch pain in my ass fucking mount code.
Just look at that list of files.  Keeeeerist.
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.8 1999/07/14 18:13:24 mud Exp $";
d114 1
a114 1
	   act("$p doesn't seem to go anywhere.",ch,portal,NULL,TO_CHAR);
d125 1
a125 1
	act("$n steps into $p.",ch,portal,NULL,TO_ROOM);
d140 1
a140 1
	    act("You enter $p.",ch,portal,NULL,TO_CHAR);
d143 1
a143 1
	        ch,portal,NULL,TO_CHAR); 
d179 1
a179 1
	    act("$n has arrived.",ch,portal,NULL,TO_ROOM);
d181 1
a181 1
	    act("$n has arrived through $p.",ch,portal,NULL,TO_ROOM);
d216 1
a216 1
                    	ch,NULL,fch,TO_CHAR);
d218 1
a218 1
                    	fch,NULL,NULL,TO_CHAR);
d222 1
a222 1
            	act( "You follow $N.", fch, NULL, ch, TO_CHAR );
d229 1
a229 1
	    act("$p fades out of existence.",ch,portal,NULL,TO_CHAR);
d231 1
a231 1
		act("$p fades out of existence.",ch,portal,NULL,TO_ROOM);
d235 1
a235 1
		    old_room->people,portal,NULL,TO_CHAR);
d237 1
a237 1
		    old_room->people,portal,NULL,TO_ROOM);
@


1.8
log
@Changed the /**/ RCS Id to a static char rcsid[] = "Id";
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: act_enter.c,v 1.7 1999/06/17 15:36:07 mud Exp $";
d147 11
@


1.7
log
@Addded NOCLAN room flag not allowing clanners in rooms
-Poquah
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.6 1999/04/23 23:43:35 mud Exp $ */
@


1.6
log
@Change all PLR_HIGHLANDER to MHS_HIGHLANDER and moved under MHS bit
-Poquah
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.5 1999/04/17 22:54:30 mud Exp $ */
d46 1
a46 1
	&&   !room_is_private(room)
d112 1
a112 1
	||  (room_is_private(location) && !IS_TRUSTED(ch,IMPLEMENTOR)))
@


1.5
log
@Highlanders do not need to sense themselves
-Poquah
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.4 1999/04/17 09:27:11 mud Exp $ */
d127 1
a127 1
        if (IS_SET(ch->act,PLR_HIGHLANDER))
d132 1
a132 1
	      if (IS_SET(fch->act,PLR_HIGHLANDER) && fch != ch)
d155 1
a155 1
        if (IS_SET(ch->act,PLR_HIGHLANDER))
d160 1
a160 1
	      if (IS_SET(fch->act,PLR_HIGHLANDER) && fch != ch)
@


1.4
log
@Highlanders sense to other Highlanders in room
-Poquah
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.3 1998/11/22 08:04:39 mud Exp $ */
d132 1
a132 1
	      if (IS_SET(fch->act,PLR_HIGHLANDER))
d160 1
a160 1
	      if (IS_SET(fch->act,PLR_HIGHLANDER))
@


1.3
log
@Infiltrate coded.
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.2 1998/10/05 09:10:24 mud Exp $ */
d127 12
d152 13
@


1.2
log
@C

Added ability to flag an entrei area as no-transport.
Set any mob in the area to act_notrans and it's automatic from there.
Saves us the annoyance of converting area files formats.
@
text
@d18 1
a18 1
/* @@(#)$Id: act_enter.c,v 1.1 1998/06/16 17:49:12 mud Exp $ */
d45 1
d111 1
@


1.1
log
@Initial insert of all src files.
@
text
@d18 1
a18 1
/* @@(#)$Id$ */
d50 2
a51 1
        &&   !room->area->under_develop)
@
