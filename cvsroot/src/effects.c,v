head	1.40;
access;
symbols;
locks; strict;
comment	@ * @;


1.40
date	2004.03.27.15.51.41;	author boogums;	state Exp;
branches;
next	1.39;

1.39
date	2002.10.20.00.46.27;	author boogums;	state Exp;
branches;
next	1.38;

1.38
date	2002.04.30.15.04.01;	author rusty;	state Exp;
branches;
next	1.37;

1.37
date	2002.02.25.20.17.28;	author poquah;	state Exp;
branches;
next	1.36;

1.36
date	2002.02.25.20.14.21;	author poquah;	state Exp;
branches;
next	1.35;

1.35
date	2001.11.16.00.32.19;	author rage;	state Exp;
branches;
next	1.34;

1.34
date	2001.10.19.19.45.07;	author rage;	state Exp;
branches;
next	1.33;

1.33
date	2001.08.08.04.23.27;	author poquah;	state Exp;
branches;
next	1.32;

1.32
date	2001.06.09.03.59.14;	author guerrand;	state Exp;
branches;
next	1.31;

1.31
date	2001.06.02.18.55.41;	author guerrand;	state Exp;
branches;
next	1.30;

1.30
date	2001.05.20.21.45.39;	author rusty;	state Exp;
branches;
next	1.29;

1.29
date	2001.03.03.19.06.48;	author mud;	state Exp;
branches;
next	1.28;

1.28
date	2000.09.13.14.01.48;	author mud;	state Exp;
branches;
next	1.27;

1.27
date	2000.08.20.01.03.27;	author mud;	state Exp;
branches;
next	1.26;

1.26
date	2000.08.19.21.56.25;	author mud;	state Exp;
branches;
next	1.25;

1.25
date	2000.06.28.00.57.12;	author mud;	state Exp;
branches;
next	1.24;

1.24
date	2000.06.17.19.14.22;	author mud;	state Exp;
branches;
next	1.23;

1.23
date	2000.05.27.02.44.09;	author mud;	state Exp;
branches;
next	1.22;

1.22
date	2000.05.24.03.09.36;	author mud;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.24.02.53.25;	author mud;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.22.00.26.35;	author mud;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.22.00.17.14;	author mud;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.21.23.53.50;	author mud;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.18.19.50.56;	author mud;	state Exp;
branches;
next	1.16;

1.16
date	99.09.18.08.44.11;	author mud;	state Exp;
branches;
next	1.15;

1.15
date	99.09.18.08.07.04;	author mud;	state Exp;
branches;
next	1.14;

1.14
date	99.08.19.18.00.45;	author mud;	state Exp;
branches;
next	1.13;

1.13
date	99.08.19.17.58.23;	author mud;	state Exp;
branches;
next	1.12;

1.12
date	99.08.19.17.45.35;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	99.07.14.18.13.37;	author mud;	state Exp;
branches;
next	1.10;

1.10
date	99.05.22.21.44.14;	author mud;	state Exp;
branches;
next	1.9;

1.9
date	98.10.09.18.32.14;	author mud;	state Exp;
branches;
next	1.8;

1.8
date	98.08.13.16.22.23;	author mud;	state Exp;
branches;
next	1.7;

1.7
date	98.08.13.14.38.41;	author mud;	state Exp;
branches;
next	1.6;

1.6
date	98.08.13.05.24.09;	author mud;	state Exp;
branches;
next	1.5;

1.5
date	98.08.12.08.20.16;	author mud;	state Exp;
branches;
next	1.4;

1.4
date	98.08.07.20.19.57;	author mud;	state Exp;
branches;
next	1.3;

1.3
date	98.08.06.04.24.51;	author mud;	state Exp;
branches;
next	1.2;

1.2
date	98.08.05.06.59.13;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	98.06.16.17.49.21;	author mud;	state Exp;
branches;
next	;


desc
@@


1.40
log
@many changes
@
text
@/***************************************************************************
 *  Original Diku Mud copyright (C) 1990, 1991 by Sebastian Hammer,        *
 *  Michael Seifert, Hans Henrik St{rfeldt, Tom Madsen, and Katja Nyboe.   *
 *                                                                         *
 *  Merc Diku Mud improvments copyright (C) 1992, 1993 by Michael          *
 *  Chastain, Michael Quan, and Mitchell Tse.                              *
 *                                                                         *
 *  In order to use any part of this Merc Diku Mud, you must comply with   *
 *  both the original Diku license in 'license.doc' as well the Merc       *
 *  license in 'license.txt'.  In particular, you may not remove either of *
 *  these copyright notices.                                               *
 *                                                                         *
 *  Much time and thought has gone into this software and you are          *
 *  benefitting.  We hope that you share your changes too.  What goes      *
 *  around, comes around.                                                  *
 ***************************************************************************/
 
static char rcsid[] = "$Id: effects.c,v 1.39 2002/10/20 00:46:27 boogums Exp $";
#if defined(macintosh)
#include <types.h>
#else
#include <sys/types.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "merc.h"
#include "recycle.h"

void acid_effect(void *vo, int level, int dam, int target)
{
    if (target == TARGET_ROOM) /* nail objects on the floor */
     {
	ROOM_INDEX_DATA *room = (ROOM_INDEX_DATA *) vo;
	OBJ_DATA *obj, *obj_next;

	for (obj = room->contents; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
	    acid_effect(obj,level,dam,TARGET_OBJ);
	}
	return;
    }

    if (target == TARGET_CHAR)  /* do the effect on a victim */
    {
	CHAR_DATA *victim = (CHAR_DATA *) vo;
	OBJ_DATA *obj, *obj_next;
	
	/* let's toast some gear */
	if(!IS_SET(victim->mhs,MHS_GLADIATOR) && 
	   !IS_SET(victim->mhs,MHS_HIGHLANDER))
	{
	for (obj = victim->carrying; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
	    acid_effect(obj,level,dam,TARGET_OBJ);
	}
	}
	return;
    }

    if (target == TARGET_OBJ) /* toast an object */
    {
	OBJ_DATA *obj = (OBJ_DATA *) vo;
	OBJ_DATA *t_obj,*n_obj;
	/*
	CHAR_DATA *victim = (CHAR_DATA *) vo;
	 */
	int chance;
	char *msg;

	if (IS_OBJ_STAT(obj,ITEM_BURN_PROOF)
	||  IS_OBJ_STAT(obj,ITEM_NOPURGE)
	||  number_range(0,4) == 0)
	    return;

	chance = level / 4 + dam / 10;

	if (chance > 25)
	    chance = (chance - 25) / 2 + 25;
	 if (chance > 50)
	    chance = (chance - 50) / 2 + 50;

	if (IS_OBJ_STAT(obj,ITEM_BLESS))
	    chance -= 5;

	chance -= obj->level * 2;

	switch (obj->item_type)
	{
	    default:
		return;
	    case ITEM_CONTAINER:
	    case ITEM_CORPSE_PC:
	    case ITEM_CORPSE_NPC:
		msg = "$p fumes and dissolves.";
		break;
	    case ITEM_ARMOR:
		msg = "$p is pitted and etched.";
		break;
	    case ITEM_CLOTHING:
		msg = "$p is corroded into scrap.";
	 	break;
	    case ITEM_STAFF:
	    case ITEM_WAND:
		chance -= 10;
		msg = "$p corrodes and breaks.";
		break;
	    case ITEM_SCROLL:
	    case ITEM_SPELL_PAGE:
		chance += 10;
		msg = "$p is burned into waste.";
		break; 
	}

	chance = URANGE(5,chance,95);
/*
if (!IS_IMMORTAL(victim))
 */
	if (number_percent() > chance)
	    return;

	if (obj->carried_by != NULL)
	    act(msg,obj->carried_by,obj,NULL,TO_ALL,FALSE);
	else if (obj->in_room != NULL && obj->in_room->people != NULL)
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL,FALSE);

	if (obj->item_type == ITEM_ARMOR)  /* etch it */
	{
	    AFFECT_DATA *paf;
	    bool af_found = FALSE;
	    int i;

 	    affect_enchant(obj);

	    for ( paf = obj->affected; paf != NULL; paf = paf->next)
            {
                if ( paf->location == APPLY_AC)
                {
                    af_found = TRUE;
                    paf->type = -1;
                    paf->modifier += 1;
                    paf->level = UMAX(paf->level,level);
		    break;
                }
            }
 
            if (!af_found)
            /* needs a new affect */
            {
		paf = new_affect();
 
                paf->type       = -1;
                paf->level      = level;
                paf->duration   = -1;
                paf->location   = APPLY_AC;
                paf->modifier   =  1;
                paf->bitvector  = 0;
                paf->next       = obj->affected;
                obj->affected   = paf;
            }
 
            if (obj->carried_by != NULL && obj->wear_loc != WEAR_NONE)
                for (i = 0; i < 4; i++)
                    obj->carried_by->armor[i] += 1;
            return;
	}

	/* get rid of the object */
	if (obj->contains)  /* dump contents */
	{
	    for (t_obj = obj->contains; t_obj != NULL; t_obj = n_obj)
	    {
		n_obj = t_obj->next_content;
		obj_from_obj(t_obj);
		if (obj->in_room != NULL)
		    obj_to_room(t_obj,obj->in_room);
		else if (obj->carried_by != NULL)
		    obj_to_room(t_obj,obj->carried_by->in_room);
		else
		{
		    extract_obj(t_obj);
		    continue;
		}

		acid_effect(t_obj,level/2,dam/2,TARGET_OBJ);
	    }
 	}

	extract_obj(obj);
	return;
    }
}


void cold_effect(void *vo, int level, int dam, int target)
{
    if (target == TARGET_ROOM) /* nail objects on the floor */
    {
        ROOM_INDEX_DATA *room = (ROOM_INDEX_DATA *) vo;
        OBJ_DATA *obj, *obj_next;
 
        for (obj = room->contents; obj != NULL; obj = obj_next)
        {
            obj_next = obj->next_content;
            cold_effect(obj,level,dam,TARGET_OBJ);
        }
        return;
    }

    if (target == TARGET_CHAR) /* whack a character */
    {
	CHAR_DATA *victim = (CHAR_DATA *) vo;
	OBJ_DATA *obj, *obj_next,*segment;
	
        if((segment = get_eq_char(victim, WEAR_HOLD)) != NULL)
	    if (segment->pIndexData->vnum == VNUM_WATER_SEGMENT)
		return;
	
        /* chill touch effect */
	if (!saves_spell(level/4 + dam / 20, victim, DAM_COLD))
	{
	    AFFECT_DATA af;

            act("$n turns blue and shivers.",victim,NULL,NULL,TO_ROOM,FALSE);
	    act("A chill sinks deep into your bones."
		,victim,NULL,NULL,TO_CHAR,FALSE);
            af.where     = TO_AFFECTS;
            af.type      = skill_lookup("chill touch");
            af.level     = level;
            af.duration  = 6;
            af.location  = APPLY_STR;
            af.modifier  = -1;
            af.bitvector = 0;
            affect_join( victim, &af );
	}

	/* hunger! (warmth sucked out */
	if (!IS_NPC(victim))
	    gain_condition(victim,COND_HUNGER,dam/20);

	/* let's toast some gear */
	if(!IS_SET(victim->mhs,MHS_GLADIATOR) && 
	   !IS_SET(victim->mhs,MHS_HIGHLANDER))
	{
	for (obj = victim->carrying; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
 	    if ( is_affected(victim,skill_lookup("frost shield") ) )
		cold_effect(obj,level/2,dam,TARGET_OBJ);
	    else
	        cold_effect(obj,level,dam,TARGET_OBJ);
	}
	}
	return;
   }

   if (target == TARGET_OBJ) /* toast an object */
   {
	OBJ_DATA *obj = (OBJ_DATA *) vo;
	int chance;
	char *msg;

	if (IS_OBJ_STAT(obj,ITEM_BURN_PROOF)
	||  IS_OBJ_STAT(obj,ITEM_NOPURGE)
	||  number_range(0,4) == 0)
	    return;

	chance = level / 4 + dam / 10;

	if (chance > 25)
	    chance = (chance - 25) / 2 + 25;
	if (chance > 50)
	    chance = (chance - 50) / 2 + 50;

	if (IS_OBJ_STAT(obj,ITEM_BLESS))
	    chance -= 5;

 	chance -= obj->level * 2;

	switch(obj->item_type)
	{
	    default:
		return;
	    case ITEM_POTION:
		msg = "$p freezes and shatters!";
		chance += 25;
		break;
	    case ITEM_DRINK_CON:
		msg = "$p freezes and shatters!";
		chance += 5;
		break;
	}

	chance = URANGE(5,chance,95);

	if (number_percent() > chance)
	    return;

	if (obj->carried_by != NULL)
	    act(msg,obj->carried_by,obj,NULL,TO_ALL,FALSE);
	else if (obj->in_room != NULL && obj->in_room->people != NULL)
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL,FALSE);

	extract_obj(obj);
	return;
    }
}
  
void trap_effect( CHAR_DATA *ch,     AFFECT_DATA *paf )
{
    CHAR_DATA *victim, *vch_next;
    int dam;
    int save;

    if( is_affected(ch,skill_lookup("wraithform")) )
	return;

    /*  Can't be trapped if non clanned, a mob or if you have the 
	trap skill above 1%
     */
    if ( IS_NPC(ch) || !is_clan(ch) || ( get_skill(ch, gsn_trap) > 1 ) )
    {
	return;
    }

    if (IS_SET(ch->mhs,MHS_HIGHLANDER))
      return;

    save = ( paf->level - get_curr_stat(ch,STAT_DEX)/4 );        
    if ( paf->level > ch->level + 8 )
    /* Circumvent pkill?  NOT! */
	return;
    /* let's take it the other way too*/
    if ( paf->level < ch->level - 8 )
    {
      return;
    }

 
    switch( paf->location )
    {
    case TRAP_CLAW: /* damage */

     /* dam = number_range(ch->level,UMAX(ch->level,get_skill(ch,gsn_trap)));*/
     dam = dice( paf->level /5, paf->modifier  );
     raffect_remove(ch->in_room,paf);
     act("You tripped a claw trap!",ch,NULL,NULL,TO_CHAR,FALSE);
     act("$n trips a claw trap!",ch,NULL,NULL,TO_ROOM,FALSE);
     /* want these to work just a little more */
     if ( number_percent() > ( save + 10 ) )
     {
	 act("You dodged the trap.",ch,NULL,NULL,TO_CHAR,FALSE);
	 act("$n dodges the trap.",ch,NULL,NULL,TO_ROOM,FALSE);
	 return;
     }
     damage(ch,ch,dam,0,DAM_BASH,FALSE,FALSE);  
     break;
    case TRAP_SNARE: /* hold alter trap for char, and swap it */
     /* want these to work a little less often , -10 on save */
     if ( number_percent() > ( save - 10 ) )
     {
	 act("You dodged a snare trap!",ch,NULL,NULL,TO_CHAR,FALSE);
	 act("$n dodges a snare trap.",ch,NULL,NULL,TO_ROOM,FALSE);
	 raffect_remove(ch->in_room,paf);
	 return;
     }
     paf->where = TO_AFFECTS;
     paf->duration =  1+UMAX(0, paf->level - 51 );
     paf->location = 0;
     affect_to_char(ch,paf);
     raffect_remove(ch->in_room,paf);
     ch->position = POS_RESTING;
     ch->pcdata->quit_time = 2;
     act("You are caught in a snare trap!",ch,NULL,NULL,TO_CHAR,FALSE);
     act("$n is caught in a snare trap.",ch,NULL,NULL,TO_ROOM,FALSE);
     break;
    case TRAP_ALARM: /* just send an alarm out */
     raffect_remove(ch->in_room,paf);
     /* want these to wrok often, so add 30% to save number */
     if ( number_percent() > ( save + 30 ) )
     {
	act("You dodged an alarm trap!",ch,NULL,NULL,TO_CHAR,FALSE);
	act("$n dodges a alarm trap.",ch,NULL,NULL,TO_ROOM,FALSE);
     }
     else
     {
       act("You tripped an alarm trap!",ch,NULL,NULL,TO_CHAR,FALSE);
       act("$n trips an alarm trap!",ch,NULL,NULL,TO_ROOM,FALSE);
       for ( victim = char_list ; victim != NULL ; victim = vch_next )
       {
	 vch_next = victim->next;
	 if ( IS_NPC(victim) )
            continue;
         if ( victim->in_room == NULL )
	    continue;
         if (victim == ch)
	    continue;
	 if ( victim->in_room->area == ch->in_room->area && IS_AWAKE(victim) )
    send_to_char("You hear a noisy clatter in the distance.\n\r",victim);
       }
     }

     break;
    default:
     bug("Trap_effect: invalid trap",0);
     break;
   }
    return;
}

void holy_effect( CHAR_DATA *victim, int level, int align, CHAR_DATA *ch ) 
{
    AFFECT_DATA af;

    if ( !IS_AFFECTED(victim,AFF_BLIND) &&
	 !saves_spell(level/5,victim,DAM_OTHER) )
    {
        if ( align >= 350 )
	{
     act("$n is blinded by the light.",victim,NULL,NULL,TO_ROOM,FALSE);
     act("You are blinded by the light.",victim,NULL,NULL,TO_CHAR,FALSE);
	}
	else
	{
    act("$n is surrounded by unholy darkness.",victim,NULL,NULL,TO_ROOM,FALSE);
    act("You are surrouned by unholy darkness.",victim,NULL,NULL,TO_CHAR,FALSE);
	}

	af.where 		= TO_AFFECTS;
	af.type 		= skill_lookup("blindness");
	af.level 		= level / 2;
	af.duration 		= level / 10;
	af.location		= APPLY_HITROLL; 
	af.modifier		= -4;
	af.bitvector		= AFF_BLIND;

	affect_to_char(victim,&af); 
    }

    return;
}



void fire_effect(void *vo, int level, int dam, int target)
{
    if (target == TARGET_ROOM)  /* nail objects on the floor */
    {
	ROOM_INDEX_DATA *room = (ROOM_INDEX_DATA *) vo;
	OBJ_DATA *obj, *obj_next;

	for (obj = room->contents; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
	    fire_effect(obj,level,dam,TARGET_OBJ);
	}
	return;
    }
 
    if (target == TARGET_CHAR)   /* do the effect on a victim */
    {
	CHAR_DATA *victim = (CHAR_DATA *) vo;
	OBJ_DATA *obj, *obj_next, *segment;

        if((segment = get_eq_char(victim, WEAR_HOLD)) != NULL)
	    if (segment->pIndexData->vnum == VNUM_FIRE_SEGMENT)
		return;

 	if (!is_affected(victim,skill_lookup("flame shield") ) )
        { 
           /* chance of blindness */
           if (!IS_AFFECTED(victim,AFF_BLIND)
               &&  !saves_spell(level / 4 + dam / 20, victim,DAM_FIRE))
           {
              AFFECT_DATA af;
              act("$n is blinded by smoke!",victim,NULL,NULL,TO_ROOM,FALSE);
              act("Your eyes tear up from smoke...you can't see a thing!",
                   victim,NULL,NULL,TO_CHAR,FALSE);
	 
              af.where        = TO_AFFECTS;
              af.type         = skill_lookup("fire breath");
              af.level        = level;
              af.duration     = 0; /*number_range(0,level/10);*/
              af.location     = APPLY_HITROLL;
              af.modifier     = -4;
              af.bitvector    = AFF_BLIND;
 
              affect_to_char(victim,&af);
           }

           /* getting thirsty */
           if (!IS_NPC(victim))
              gain_condition(victim,COND_THIRST,dam/20);
	}

	/* let's toast some gear! */
	if(!IS_SET(victim->mhs,MHS_GLADIATOR) && 
	   !IS_SET(victim->mhs,MHS_HIGHLANDER))
	{
	for (obj = victim->carrying; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;

 	    if ( is_affected(victim,skill_lookup("flame shield") ) )
		fire_effect(obj,level/2,dam,TARGET_OBJ);
	    else
	        fire_effect(obj,level,dam,TARGET_OBJ);
        }
	}
	return;
    }

    if (target == TARGET_OBJ)  /* toast an object */
    {
	OBJ_DATA *obj = (OBJ_DATA *) vo;
	OBJ_DATA *t_obj,*n_obj;
	int chance;
	char *msg;

    	if (IS_OBJ_STAT(obj,ITEM_BURN_PROOF)
        ||  IS_OBJ_STAT(obj,ITEM_NOPURGE)
	||  number_range(0,4) == 0)
            return;
 
        chance = level / 4 + dam / 10;
 
        if (chance > 25)
            chance = (chance - 25) / 2 + 25;
        if (chance > 50)
            chance = (chance - 50) / 2 + 50;

        if (IS_OBJ_STAT(obj,ITEM_BLESS))
            chance -= 5;
        chance -= obj->level * 2;

        switch ( obj->item_type )
        {
        default:             
	    return;
        case ITEM_CONTAINER:
            msg = "$p ignites and burns!";
            break;
        case ITEM_POTION:
            chance += 25;
            msg = "$p bubbles and boils!";
            break;
        case ITEM_SCROLL:
	case ITEM_SPELL_PAGE:
            chance += 50;
            msg = "$p crackles and burns!";
            break;
        case ITEM_STAFF:
            chance += 10;
            msg = "$p smokes and chars!";
            break;
        case ITEM_WAND:
            msg = "$p sparks and sputters!";
            break;
        case ITEM_FOOD:
            msg = "$p blackens and crisps!";
            break;
        case ITEM_PILL:
            msg = "$p melts and drips!";
            break;
        }

        chance = URANGE(5,chance,95);

        if (number_percent() > chance)
            return;
 
	if (obj->carried_by != NULL)
            act( msg, obj->carried_by, obj, NULL, TO_ALL ,FALSE);
	else if (obj->in_room != NULL && obj->in_room->people != NULL)
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL,FALSE);

        if (obj->contains)
        {
            /* dump the contents */
 
            for (t_obj = obj->contains; t_obj != NULL; t_obj = n_obj)
            {
                n_obj = t_obj->next_content;
                obj_from_obj(t_obj);
		if (obj->in_room != NULL)
                    obj_to_room(t_obj,obj->in_room);
		else if (obj->carried_by != NULL)
		    obj_to_room(t_obj,obj->carried_by->in_room);
		else
		{
		    extract_obj(t_obj);
		    continue;
		}
		fire_effect(t_obj,level/2,dam/2,TARGET_OBJ);
            }
        }
 
        extract_obj( obj );
	return;
    }
}

void poison_effect(void *vo,int level, int dam, int target)
{
    if (target == TARGET_ROOM)  /* nail objects on the floor */
    {
        ROOM_INDEX_DATA *room = (ROOM_INDEX_DATA *) vo;
        OBJ_DATA *obj, *obj_next;
 
        for (obj = room->contents; obj != NULL; obj = obj_next)
        {
            obj_next = obj->next_content;
            poison_effect(obj,level,dam,TARGET_OBJ);
        }
        return;
    }
 
    if (target == TARGET_CHAR)   /* do the effect on a victim */
    {
        CHAR_DATA *victim = (CHAR_DATA *) vo;
        OBJ_DATA *obj, *obj_next;

	/* chance of poisoning */
        if (!saves_spell(level / 4 + dam / 20,victim,DAM_POISON))
        {
	    AFFECT_DATA af;

            send_to_char("You feel poison coursing through your veins.\n\r",
                victim);
            act("$n looks very ill.",victim,NULL,NULL,TO_ROOM,FALSE);

            af.where     = TO_AFFECTS;
            af.type      = gsn_poison;
            af.level     = level;
            af.duration  = level / 2;
            af.location  = APPLY_STR;
            af.modifier  = -1;
            af.bitvector = AFF_POISON;
            affect_join( victim, &af );
        }

	/* equipment */
	for (obj = victim->carrying; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
	    poison_effect(obj,level,dam,TARGET_OBJ);
	}
	return;
    }

    if (target == TARGET_OBJ)  /* do some poisoning */
    {
	OBJ_DATA *obj = (OBJ_DATA *) vo;
	int chance;
	

	if (IS_OBJ_STAT(obj,ITEM_BURN_PROOF)
  	||  IS_OBJ_STAT(obj,ITEM_BLESS)
	||  number_range(0,4) == 0)
	    return;

	chance = level / 4 + dam / 10;
	if (chance > 25)
	    chance = (chance - 25) / 2 + 25;
	if (chance > 50)
	    chance = (chance - 50) / 2 + 50;

	chance -= obj->level * 2;

	switch (obj->item_type)
	{
	    default:
		return;
	    case ITEM_FOOD:
		break;
	    case ITEM_DRINK_CON:
		if (obj->value[0] == obj->value[1])
		    return;
		break;
	}

	chance = URANGE(5,chance,95);

	if (number_percent() > chance)
	    return;

	obj->value[3] = 1;
	return;
    }
}


void shock_effect(void *vo,int level, int dam, int target)
{
    if (target == TARGET_ROOM)
    {
	ROOM_INDEX_DATA *room = (ROOM_INDEX_DATA *) vo;
	OBJ_DATA *obj, *obj_next;

	for (obj = room->contents; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
	    shock_effect(obj,level,dam,TARGET_OBJ);
	}
	return;
    }

    if (target == TARGET_CHAR)
    {
	CHAR_DATA *victim = (CHAR_DATA *) vo;
	OBJ_DATA *obj, *obj_next;

	/* daze and confused? */
	if (!saves_spell(level/4 + dam/20,victim,DAM_LIGHTNING))
	{
	    send_to_char("Your muscles stop responding.\n\r",victim);
	    DAZE_STATE(victim,UMAX(12,level/4 + dam/20));
	}

	/* toast some gear */
	if(!IS_SET(victim->mhs,MHS_GLADIATOR) && 
	   !IS_SET(victim->mhs,MHS_HIGHLANDER))
	{
	for (obj = victim->carrying; obj != NULL; obj = obj_next)
	{
	    obj_next = obj->next_content;
 	    if ( is_affected(victim,skill_lookup("electric shield") ) )
		shock_effect(obj,level/2,dam,TARGET_OBJ);
	    else
	        shock_effect(obj,level,dam,TARGET_OBJ);
	}
	}
	return;
    }

    if (target == TARGET_OBJ)
    {
	OBJ_DATA *obj = (OBJ_DATA *) vo;
	int chance;
	char *msg;

	if (IS_OBJ_STAT(obj,ITEM_BURN_PROOF)
	||  IS_OBJ_STAT(obj,ITEM_NOPURGE)
	||  number_range(0,4) == 0)
	    return;

	chance = level / 4 + dam / 10;

	if (chance > 25)
	    chance = (chance - 25) / 2 + 25;
	if (chance > 50)
	    chance = (chance - 50) /2 + 50;

	if (IS_OBJ_STAT(obj,ITEM_BLESS))
	    chance -= 5;

 	chance -= obj->level * 2;

	switch(obj->item_type)
	{
	    default:
		return;
	   case ITEM_WAND:
	   case ITEM_STAFF:
		chance += 10;
		msg = "$p overloads and explodes!";
		break;
	   case ITEM_JEWELRY:
		chance -= 10;
		msg = "$p is fused into a worthless lump.";
	}
	
	chance = URANGE(5,chance,95);

	if (number_percent() > chance)
	    return;

	if (obj->carried_by != NULL)
	    act(msg,obj->carried_by,obj,NULL,TO_ALL,FALSE);
	else if (obj->in_room != NULL && obj->in_room->people != NULL)
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL,FALSE);

	extract_obj(obj);
	return;
    }
}

@


1.39
log
@ahhh effects.c touched that's right
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.38 2002/04/30 15:04:01 rusty Exp $";
d414 1
a414 1
void holy_effect( CHAR_DATA *victim, int level, int align )
@


1.38
log
@Taking out Pookie's broken victim = vo when vo is an OBJ_DATA
in acid_effect()
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.37 2002/02/25 20:17:28 poquah Exp $";
d336 6
@


1.37
log
@declare victim in object section
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.36 2002/02/25 20:14:21 poquah Exp $";
d68 1
d70 1
d119 1
a119 1

d121 1
@


1.36
log
@make immortals always victims of etching so I can test bug
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.35 2001/11/16 00:32:19 rage Exp $";
d68 1
@


1.35
log
@added in water segment effects
modified water king special to flee more reliably
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.34 2001/10/19 19:45:07 rage Exp $";
d117 1
@


1.34
log
@added more effects for segments
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.33 2001/08/08 04:23:27 poquah Exp $";
d211 5
a215 1
	OBJ_DATA *obj, *obj_next;
d217 1
a217 1
	/* chill touch effect */
@


1.33
log
@add a quit timer on snare traps so people just dont log out
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.32 2001/06/09 03:59:14 guerrand Exp $";
d451 5
a455 1
	OBJ_DATA *obj, *obj_next;
@


1.32
log
@Fixed a typo with 'surrouned'
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.31 2001/06/02 18:55:41 guerrand Exp $";
d361 1
@


1.31
log
@GMAN
Made it so spell pages get destroytd like scrolls by effects.
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.30 2001/05/20 21:45:39 rusty Exp $";
d412 1
a412 1
    act("$n is surrouned by unholy darkness.",victim,NULL,NULL,TO_ROOM,FALSE);
@


1.30
log
@Wraithed don't get slammed by traps when they enter a room
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.29 2001/03/03 19:06:48 mud Exp $";
d109 1
d531 1
@


1.29
log
@removed bramage()
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.28 2000/09/13 14:01:48 mud Exp $";
d307 7
d316 1
a316 2
    return;
    /* can't be trapped if non clanned or a mob or if you have the trap skill above 1% */
@


1.28
log
@
added check for holylight to detect good/evil and see spell effects like detect magic

slightly curved damage done by morphed chars

changed sneak again to make it less effective
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.27 2000/08/20 01:03:27 mud Exp $";
d337 1
a337 1
     bramage(ch,ch,dam,0,DAM_BASH,FALSE);  
@


1.27
log
@highlanders dont damage eq
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.26 2000/08/19 21:56:25 mud Exp $";
d354 2
a355 1
     send_to_char("You are caught in a snare trap!\n\r",ch);
@


1.26
log
@new highlander code -poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.25 2000/06/28 00:57:12 mud Exp $";
d52 2
a53 1
	if(!IS_SET(victim->mhs,MHS_GLADIATOR))
d235 2
a236 1
	if(!IS_SET(victim->mhs,MHS_GLADIATOR))
d472 2
a473 1
	if(!IS_SET(victim->mhs,MHS_GLADIATOR))
d695 2
a696 1
	if(!IS_SET(victim->mhs,MHS_GLADIATOR))
@


1.25
log
@gladiator stuff
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.24 2000/06/17 19:14:22 mud Exp $";
d310 3
@


1.24
log
@flame shield protects from fire blind
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.23 2000/05/27 02:44:09 mud Exp $";
d52 2
d59 1
d234 2
d244 1
d467 2
d478 1
d689 2
d698 1
@


1.23
log
@Kit Changing: REmove sepcial effects ( ennemy, spec)
Float: swim skill helps you vs floating away
Hold: casting level capped similar to sleep
Position for zap, brandish, quaff, recite set to Fighting
Check on eating pills for position at least of fighting
Snare: duration similar to hold

Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.22 2000/05/24 03:09:36 mud Exp $";
d433 10
a442 8
	/* chance of blindness */
	if (!IS_AFFECTED(victim,AFF_BLIND)
	&&  !saves_spell(level / 4 + dam / 20, victim,DAM_FIRE))
	{
            AFFECT_DATA af;
            act("$n is blinded by smoke!",victim,NULL,NULL,TO_ROOM,FALSE);
            act("Your eyes tear up from smoke...you can't see a thing!",
		victim,NULL,NULL,TO_CHAR,FALSE);
d444 7
a450 7
            af.where        = TO_AFFECTS;
            af.type         = skill_lookup("fire breath");
            af.level        = level;
            af.duration     = 0; /*number_range(0,level/10);*/
            af.location     = APPLY_HITROLL;
            af.modifier     = -4;
            af.bitvector    = AFF_BLIND;
d452 6
a457 1
            affect_to_char(victim,&af);
a458 4

	/* getting thirsty */
	if (!IS_NPC(victim))
	    gain_condition(victim,COND_THIRST,dam/20);
@


1.22
log
@immune traps if you have the trap skill above 1%
Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.21 2000/05/24 02:53:25 mud Exp $";
d338 1
a338 1
     paf->duration =  paf->level/17;
@


1.21
log
@trap fixes, non clanners can't use it
similar to hold person now, snare puts yuou in resting position
Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.20 2000/04/22 00:26:35 mud Exp $";
d299 1
a299 1
    if ( IS_NPC(ch) || !is_clan(ch) )
d302 1
a302 1
    /* can't be trapped if non clanned or a mob */
@


1.20
log
@More tweak to alarm trap
Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.19 2000/04/22 00:17:14 mud Exp $";
d299 5
d315 1
a315 1
     dam = dice( paf->level /3, paf->level /5 );
d342 1
@


1.19
log
@Minor twear on alarm trap and who/how it reports to

Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.18 2000/04/21 23:53:50 mud Exp $";
d354 1
a354 1
	 if ( !IS_NPC(victim) )
@


1.18
log
@changed success ratio of traps
changed damage of a claw trap to a dice roll
based the snare hours on the level of the trap
Minister
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.17 2000/04/18 19:50:56 mud Exp $";
d296 1
a296 1
    CHAR_DATA *victim;
d351 1
a351 1
       for ( victim = char_list ; victim != NULL ; victim = victim->next )
d353 1
d357 2
@


1.17
log
@added a BOOL ooc as an extra arg to act() and act_new() to have it
deal properly with the BOOL in can_see() and PERS().
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.16 1999/09/18 08:44:11 mud Exp $";
d300 1
a300 1
    save = ( paf->level - get_curr_stat(ch,STAT_DEX)/3 );        
d308 3
a310 1
     dam = number_range(ch->level,UMAX(ch->level,get_skill(ch,gsn_trap)));
d314 2
a315 1
     if ( number_percent() > save )
d324 2
a325 1
     if ( number_percent() > save )
d333 1
a333 1
     paf->duration =  0;
d341 2
a342 1
     if ( number_percent() > save )
@


1.16
log
@Elementalist Electric Shield
-Poquah
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.15 1999/09/18 08:07:04 mud Exp $";
d116 1
a116 1
	    act(msg,obj->carried_by,obj,NULL,TO_ALL);
d118 1
a118 1
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL);
d213 3
a215 2
            act("$n turns blue and shivers.",victim,NULL,NULL,TO_ROOM);
	    act("A chill sinks deep into your bones.",victim,NULL,NULL,TO_CHAR);
d285 1
a285 1
	    act(msg,obj->carried_by,obj,NULL,TO_ALL);
d287 1
a287 1
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL);
d310 2
a311 2
     act("You tripped a claw trap!",ch,NULL,NULL,TO_CHAR);
     act("$n trips a claw trap!",ch,NULL,NULL,TO_ROOM);
d314 2
a315 2
	 act("You dodged the trap.",ch,NULL,NULL,TO_CHAR);
	 act("$n dodges the trap.",ch,NULL,NULL,TO_ROOM);
d323 2
a324 2
	 act("You dodged a snare trap!",ch,NULL,NULL,TO_CHAR);
	 act("$n dodges a snare trap.",ch,NULL,NULL,TO_ROOM);
d339 2
a340 2
	act("You dodged an alarm trap!",ch,NULL,NULL,TO_CHAR);
	act("$n dodges a alarm trap.",ch,NULL,NULL,TO_ROOM);
d344 2
a345 2
       act("You tripped an alarm trap!",ch,NULL,NULL,TO_CHAR);
       act("$n trips an alarm trap!",ch,NULL,NULL,TO_ROOM);
d374 2
a375 2
	     act("$n is blinded by the light.",victim,NULL,NULL,TO_ROOM);
	     act("You are blinded by the light.",victim,NULL,NULL,TO_CHAR);
d379 2
a380 2
	    act("$n is surrouned by unholy darkness.",victim,NULL,NULL,TO_ROOM);
	    act("You are surrouned by unholy darkness.",victim,NULL,NULL,TO_CHAR);
d424 1
a424 1
            act("$n is blinded by smoke!",victim,NULL,NULL,TO_ROOM);
d426 1
a426 1
		victim,NULL,NULL,TO_CHAR);
d515 1
a515 1
            act( msg, obj->carried_by, obj, NULL, TO_ALL );
d517 1
a517 1
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL);
d572 1
a572 1
            act("$n looks very ill.",victim,NULL,NULL,TO_ROOM);
d717 1
a717 1
	    act(msg,obj->carried_by,obj,NULL,TO_ALL);
d719 1
a719 1
	    act(msg,obj->in_room->people,obj,NULL,TO_ALL);
@


1.15
log
@Elementalists Frost Shield
-Poquah
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.14 1999/08/19 18:00:45 mud Exp $";
d233 1
a233 1
 	    if ( is_affected(victim,skill_lookup("cold shield") ) )
d665 4
a668 1
	    shock_effect(obj,level,dam,TARGET_OBJ);
@


1.14
log
@Traps blah
-Poquah
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.13 1999/08/19 17:58:23 mud Exp $";
d233 4
a236 1
	    cold_effect(obj,level,dam,TARGET_OBJ);
@


1.13
log
@Traps dont seem to work, spiffy up Alarm to actually send the alarm notificationto the players in the area
-Poquah
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.12 1999/08/19 17:45:35 mud Exp $";
d343 1
d350 1
@


1.12
log
@Cosmetic Traps fix, was sending off both dodged and tripped alarm traps
-Poquah
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.11 1999/07/14 18:13:37 mud Exp $";
d344 3
a346 2
		continue;
	 else
d348 1
a348 1
	     send_to_char("You hear a noisy clatter in the distance.\n\r",victim);
@


1.11
log
@Changed the /**/ RCS Id to a static char rcsid[] = "Id";
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: effects.c,v 1.10 1999/05/22 21:44:14 mud Exp $";
a332 2
     act("You tripped an alarm trap!",ch,NULL,NULL,TO_CHAR);
     act("$n trips an alarm trap!",ch,NULL,NULL,TO_ROOM);
d336 1
a336 1
	act("$n dodges a snare trap.",ch,NULL,NULL,TO_ROOM);
d339 4
a342 1
     for ( victim = char_list ; victim != NULL ; victim = victim->next )
d348 1
@


1.10
log
@*Added flame shiel
*Fixed betstow holiness and flamesword
*Repaired a bug in shapaeshifter
*that's it
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.9 1998/10/09 18:32:14 mud Exp $ */
@


1.9
log
@Trap effect chance modification
-Rusty
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.8 1998/08/13 16:22:23 mud Exp $ */
d439 4
a442 1
	    fire_effect(obj,level,dam,TARGET_OBJ);
@


1.8
log
@Combined damage() and damage_old() into damage() adding
a boll at the end 'iOld' for "is old" and appropriate if()'s
for the differences.  Added FALSE bool to damage() calls in fight.c
and replaced calls with calls to bramage() in other locations.
Made damage_old() call damage() with TRUE for iOld instead of
duplicating mass amounts of code.
-Rusty
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.7 1998/08/13 14:38:41 mud Exp $ */
d296 1
a296 1
    save = ( paf->level - (ch->level/2) - get_curr_stat(ch,STAT_DEX) );        
@


1.7
log
@Modified rockbiter 1/2 tick gains (too slow) and
changed the drunk condition check to have them recover
from their drunken state.
-Rusty
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.6 1998/08/13 05:24:09 mud Exp $ */
d314 1
a314 1
     damage(ch,ch,dam,0,DAM_BASH,FALSE);  
@


1.6
log
@* Various bug fixes, mostly
-Ben
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.5 1998/08/12 08:20:16 mud Exp $ */
d345 1
a345 1
	 if ( victim->in_room->area == ch->in_room->area )
@


1.5
log
@* Finished traps
* Rockbiters added
-Ben
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.4 1998/08/07 20:19:57 mud Exp $ */
d297 4
a300 1

d308 1
a308 1
     if ( number_percent() < save )
d317 1
a317 1
     if ( number_percent() < save )
d335 1
a335 1
     if ( number_percent() < save )
d339 2
a340 1
     }   
d346 1
a346 1
	     send_to_char("You hear a noisy clatter in the distance.\n\r",ch);
@


1.4
log
@Room affects stuff for traps.
Bleed/vampire changes.
swim/scan start at 50% and 50%up for free for existing characters.
moved trap to after trip in interp list for grandfathered use
- Both of Us
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.3 1998/08/06 04:24:51 mud Exp $ */
d292 1
d294 3
d303 8
a310 1
     send_to_char("You tripped a claw trap!\n\r",ch);
d314 7
d328 15
a342 1
    }   
d344 5
@


1.3
log
@Tons of stuff, mostly additions of holy flag for weapons.
-Ben
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.2 1998/08/05 06:59:13 mud Exp $ */
d289 26
a314 1
   
d319 2
a320 1
    if ( !saves_spell(level/2,victim,DAM_OTHER) )
@


1.2
log
@* Fire breath blind effect lowered to 0 ticks from 1
* Few minor aesthetic fixes in spells and eating code

-Ben
@
text
@d18 1
a18 1
 /* @@(#)$Id: effects.c,v 1.1 1998/06/16 17:49:21 mud Exp $ */
d290 31
@


1.1
log
@Initial insert of all src files.
@
text
@d18 1
a18 1
 /* @@(#)$Id$ */
d324 1
a324 1
            af.duration     = 1; /*number_range(0,level/10);*/
@
