head	1.187;
access;
symbols;
locks; strict;
comment	@ * @;


1.187
date	2003.08.16.16.45.07;	author boogums;	state Exp;
branches;
next	1.186;

1.186
date	2003.06.14.19.53.12;	author boogums;	state Exp;
branches;
next	1.185;

1.185
date	2003.06.03.02.57.28;	author boogums;	state Exp;
branches;
next	1.184;

1.184
date	2002.11.16.22.52.51;	author boogums;	state Exp;
branches;
next	1.183;

1.183
date	2002.11.12.03.05.00;	author boogums;	state Exp;
branches;
next	1.182;

1.182
date	2002.11.10.19.10.53;	author boogums;	state Exp;
branches;
next	1.181;

1.181
date	2002.06.22.17.31.04;	author mud;	state Exp;
branches;
next	1.180;

1.180
date	2002.06.22.17.28.57;	author mud;	state Exp;
branches;
next	1.179;

1.179
date	2002.06.20.15.55.00;	author rusty;	state Exp;
branches;
next	1.178;

1.178
date	2002.05.22.18.00.41;	author rusty;	state Exp;
branches;
next	1.177;

1.177
date	2002.04.30.15.22.33;	author rusty;	state Exp;
branches;
next	1.176;

1.176
date	2002.04.11.03.17.39;	author boogums;	state Exp;
branches;
next	1.175;

1.175
date	2002.04.01.21.14.08;	author rusty;	state Exp;
branches;
next	1.174;

1.174
date	2002.04.01.21.05.45;	author rusty;	state Exp;
branches;
next	1.173;

1.173
date	2002.03.12.17.16.27;	author mud;	state Exp;
branches;
next	1.172;

1.172
date	2002.03.12.03.34.41;	author mud;	state Exp;
branches;
next	1.171;

1.171
date	2002.03.12.03.01.07;	author rusty;	state Exp;
branches;
next	1.170;

1.170
date	2002.03.11.06.57.53;	author mud;	state Exp;
branches;
next	1.169;

1.169
date	2002.03.11.06.57.19;	author mud;	state Exp;
branches;
next	1.168;

1.168
date	2002.03.11.06.24.39;	author rusty;	state Exp;
branches;
next	1.167;

1.167
date	2002.03.11.02.34.24;	author rusty;	state Exp;
branches;
next	1.166;

1.166
date	2002.03.09.20.12.57;	author mud;	state Exp;
branches;
next	1.165;

1.165
date	2002.03.09.19.14.29;	author rusty;	state Exp;
branches;
next	1.164;

1.164
date	2002.02.22.16.32.56;	author poquah;	state Exp;
branches;
next	1.163;

1.163
date	2002.01.22.21.05.09;	author rage;	state Exp;
branches;
next	1.162;

1.162
date	2002.01.22.20.33.29;	author rage;	state Exp;
branches;
next	1.161;

1.161
date	2002.01.22.20.24.27;	author rage;	state Exp;
branches;
next	1.160;

1.160
date	2002.01.22.20.13.23;	author rage;	state Exp;
branches;
next	1.159;

1.159
date	2002.01.20.21.09.08;	author rage;	state Exp;
branches;
next	1.158;

1.158
date	2001.12.05.17.07.05;	author poquah;	state Exp;
branches;
next	1.157;

1.157
date	2001.12.05.16.39.02;	author poquah;	state Exp;
branches;
next	1.156;

1.156
date	2001.12.03.18.34.55;	author poquah;	state Exp;
branches;
next	1.155;

1.155
date	2001.12.01.23.16.57;	author poquah;	state Exp;
branches;
next	1.154;

1.154
date	2001.11.25.01.34.46;	author mud;	state Exp;
branches;
next	1.153;

1.153
date	2001.11.25.01.26.39;	author rusty;	state Exp;
branches;
next	1.152;

1.152
date	2001.10.17.03.02.48;	author boogums;	state Exp;
branches;
next	1.151;

1.151
date	2001.08.30.01.03.24;	author guerrand;	state Exp;
branches;
next	1.150;

1.150
date	2001.07.30.20.52.01;	author poquah;	state Exp;
branches;
next	1.149;

1.149
date	2001.06.15.02.27.51;	author guerrand;	state Exp;
branches;
next	1.148;

1.148
date	2001.06.09.17.42.41;	author guerrand;	state Exp;
branches;
next	1.147;

1.147
date	2001.05.27.19.56.05;	author rusty;	state Exp;
branches;
next	1.146;

1.146
date	2001.05.24.01.34.57;	author poquah;	state Exp;
branches;
next	1.145;

1.145
date	2001.05.24.01.33.27;	author poquah;	state Exp;
branches;
next	1.144;

1.144
date	2001.03.15.19.10.22;	author mud;	state Exp;
branches;
next	1.143;

1.143
date	2001.03.15.19.04.18;	author mud;	state Exp;
branches;
next	1.142;

1.142
date	2001.03.15.18.55.02;	author mud;	state Exp;
branches;
next	1.141;

1.141
date	2001.03.03.19.16.36;	author mud;	state Exp;
branches;
next	1.140;

1.140
date	2000.11.13.15.48.00;	author mud;	state Exp;
branches;
next	1.139;

1.139
date	2000.10.16.23.15.23;	author mud;	state Exp;
branches;
next	1.138;

1.138
date	2000.10.16.23.05.31;	author mud;	state Exp;
branches;
next	1.137;

1.137
date	2000.08.26.03.26.15;	author mud;	state Exp;
branches;
next	1.136;

1.136
date	2000.08.25.16.47.07;	author mud;	state Exp;
branches;
next	1.135;

1.135
date	2000.08.17.14.29.30;	author mud;	state Exp;
branches;
next	1.134;

1.134
date	2000.08.09.21.41.26;	author mud;	state Exp;
branches;
next	1.133;

1.133
date	2000.07.22.00.21.26;	author mud;	state Exp;
branches;
next	1.132;

1.132
date	2000.07.20.17.57.13;	author mud;	state Exp;
branches;
next	1.131;

1.131
date	2000.07.18.18.48.46;	author mud;	state Exp;
branches;
next	1.130;

1.130
date	2000.06.29.18.57.13;	author mud;	state Exp;
branches;
next	1.129;

1.129
date	2000.06.28.01.21.12;	author mud;	state Exp;
branches;
next	1.128;

1.128
date	2000.06.28.00.57.13;	author mud;	state Exp;
branches;
next	1.127;

1.127
date	2000.06.17.21.18.40;	author mud;	state Exp;
branches;
next	1.126;

1.126
date	2000.05.30.21.43.07;	author mud;	state Exp;
branches;
next	1.125;

1.125
date	2000.05.26.01.46.30;	author mud;	state Exp;
branches;
next	1.124;

1.124
date	2000.05.25.01.55.58;	author mud;	state Exp;
branches;
next	1.123;

1.123
date	2000.05.24.00.25.12;	author mud;	state Exp;
branches;
next	1.122;

1.122
date	2000.05.13.21.55.17;	author mud;	state Exp;
branches;
next	1.121;

1.121
date	2000.03.20.23.10.56;	author mud;	state Exp;
branches;
next	1.120;

1.120
date	2000.03.12.00.32.47;	author mud;	state Exp;
branches;
next	1.119;

1.119
date	2000.03.06.00.23.42;	author mud;	state Exp;
branches;
next	1.118;

1.118
date	2000.02.25.02.19.28;	author mud;	state Exp;
branches;
next	1.117;

1.117
date	2000.02.25.02.06.40;	author mud;	state Exp;
branches;
next	1.116;

1.116
date	2000.02.25.01.22.57;	author mud;	state Exp;
branches;
next	1.115;

1.115
date	2000.02.25.00.59.52;	author mud;	state Exp;
branches;
next	1.114;

1.114
date	2000.02.25.00.00.49;	author mud;	state Exp;
branches;
next	1.113;

1.113
date	2000.02.20.07.45.16;	author mud;	state Exp;
branches;
next	1.112;

1.112
date	2000.02.19.19.30.48;	author mud;	state Exp;
branches;
next	1.111;

1.111
date	2000.02.19.19.19.07;	author mud;	state Exp;
branches;
next	1.110;

1.110
date	2000.02.19.19.02.57;	author mud;	state Exp;
branches;
next	1.109;

1.109
date	2000.02.16.07.08.08;	author mud;	state Exp;
branches;
next	1.108;

1.108
date	2000.02.16.00.50.34;	author mud;	state Exp;
branches;
next	1.107;

1.107
date	2000.02.16.00.41.18;	author mud;	state Exp;
branches;
next	1.106;

1.106
date	2000.02.16.00.29.22;	author mud;	state Exp;
branches;
next	1.105;

1.105
date	2000.02.16.00.22.17;	author mud;	state Exp;
branches;
next	1.104;

1.104
date	2000.02.16.00.08.50;	author mud;	state Exp;
branches;
next	1.103;

1.103
date	2000.02.15.23.56.06;	author mud;	state Exp;
branches;
next	1.102;

1.102
date	2000.02.15.23.42.33;	author mud;	state Exp;
branches;
next	1.101;

1.101
date	2000.02.15.23.24.43;	author mud;	state Exp;
branches;
next	1.100;

1.100
date	2000.02.15.22.17.22;	author mud;	state Exp;
branches;
next	1.99;

1.99
date	2000.02.15.21.08.47;	author mud;	state Exp;
branches;
next	1.98;

1.98
date	2000.02.15.20.04.24;	author mud;	state Exp;
branches;
next	1.97;

1.97
date	2000.02.10.21.17.12;	author mud;	state Exp;
branches;
next	1.96;

1.96
date	2000.02.10.16.01.40;	author mud;	state Exp;
branches;
next	1.95;

1.95
date	2000.02.10.15.59.36;	author mud;	state Exp;
branches;
next	1.94;

1.94
date	2000.02.10.14.37.28;	author mud;	state Exp;
branches;
next	1.93;

1.93
date	2000.02.10.13.44.14;	author mud;	state Exp;
branches;
next	1.92;

1.92
date	2000.02.08.23.05.45;	author mud;	state Exp;
branches;
next	1.91;

1.91
date	2000.02.07.23.33.16;	author mud;	state Exp;
branches;
next	1.90;

1.90
date	2000.02.07.19.50.01;	author mud;	state Exp;
branches;
next	1.89;

1.89
date	2000.02.07.19.33.09;	author mud;	state Exp;
branches;
next	1.88;

1.88
date	2000.02.04.02.18.47;	author mud;	state Exp;
branches;
next	1.87;

1.87
date	2000.01.11.23.44.58;	author mud;	state Exp;
branches;
next	1.86;

1.86
date	2000.01.11.01.52.23;	author mud;	state Exp;
branches;
next	1.85;

1.85
date	2000.01.11.01.35.33;	author mud;	state Exp;
branches;
next	1.84;

1.84
date	2000.01.07.22.06.56;	author mud;	state Exp;
branches;
next	1.83;

1.83
date	2000.01.07.21.49.48;	author mud;	state Exp;
branches;
next	1.82;

1.82
date	99.12.20.21.55.36;	author mud;	state Exp;
branches;
next	1.81;

1.81
date	99.12.20.21.35.38;	author mud;	state Exp;
branches;
next	1.80;

1.80
date	99.12.19.21.11.47;	author mud;	state Exp;
branches;
next	1.79;

1.79
date	99.12.19.21.09.11;	author mud;	state Exp;
branches;
next	1.78;

1.78
date	99.12.19.19.47.55;	author mud;	state Exp;
branches;
next	1.77;

1.77
date	99.12.17.00.02.15;	author mud;	state Exp;
branches;
next	1.76;

1.76
date	99.12.15.00.56.56;	author mud;	state Exp;
branches;
next	1.75;

1.75
date	99.12.02.21.32.26;	author mud;	state Exp;
branches;
next	1.74;

1.74
date	99.11.29.00.14.03;	author mud;	state Exp;
branches;
next	1.73;

1.73
date	99.11.21.21.50.42;	author mud;	state Exp;
branches;
next	1.72;

1.72
date	99.11.07.00.56.05;	author mud;	state Exp;
branches;
next	1.71;

1.71
date	99.11.06.05.15.57;	author mud;	state Exp;
branches;
next	1.70;

1.70
date	99.10.25.00.21.12;	author mud;	state Exp;
branches;
next	1.69;

1.69
date	99.10.21.19.36.02;	author mud;	state Exp;
branches;
next	1.68;

1.68
date	99.10.21.19.35.02;	author mud;	state Exp;
branches;
next	1.67;

1.67
date	99.10.20.18.47.01;	author mud;	state Exp;
branches;
next	1.66;

1.66
date	99.10.20.18.39.26;	author mud;	state Exp;
branches;
next	1.65;

1.65
date	99.10.20.18.26.50;	author mud;	state Exp;
branches;
next	1.64;

1.64
date	99.10.20.16.47.34;	author mud;	state Exp;
branches;
next	1.63;

1.63
date	99.10.16.00.00.28;	author mud;	state Exp;
branches;
next	1.62;

1.62
date	99.10.15.22.40.57;	author mud;	state Exp;
branches;
next	1.61;

1.61
date	99.10.13.23.38.44;	author mud;	state Exp;
branches;
next	1.60;

1.60
date	99.10.10.17.41.36;	author mud;	state Exp;
branches;
next	1.59;

1.59
date	99.10.10.17.36.14;	author mud;	state Exp;
branches;
next	1.58;

1.58
date	99.10.10.17.12.23;	author mud;	state Exp;
branches;
next	1.57;

1.57
date	99.10.08.20.16.10;	author mud;	state Exp;
branches;
next	1.56;

1.56
date	99.09.06.02.31.43;	author mud;	state Exp;
branches;
next	1.55;

1.55
date	99.09.03.19.26.04;	author mud;	state Exp;
branches;
next	1.54;

1.54
date	99.08.22.01.22.49;	author mud;	state Exp;
branches;
next	1.53;

1.53
date	99.08.22.00.02.52;	author mud;	state Exp;
branches;
next	1.52;

1.52
date	99.08.21.23.55.52;	author mud;	state Exp;
branches;
next	1.51;

1.51
date	99.08.09.22.08.31;	author mud;	state Exp;
branches;
next	1.50;

1.50
date	99.07.27.14.07.50;	author mud;	state Exp;
branches;
next	1.49;

1.49
date	99.07.14.18.14.07;	author mud;	state Exp;
branches;
next	1.48;

1.48
date	99.07.02.00.40.27;	author mud;	state Exp;
branches;
next	1.47;

1.47
date	99.06.26.00.04.46;	author mud;	state Exp;
branches;
next	1.46;

1.46
date	99.06.11.23.40.43;	author mud;	state Exp;
branches;
next	1.45;

1.45
date	99.06.11.23.21.58;	author mud;	state Exp;
branches;
next	1.44;

1.44
date	99.06.03.01.29.17;	author mud;	state Exp;
branches;
next	1.43;

1.43
date	99.06.03.01.27.26;	author mud;	state Exp;
branches;
next	1.42;

1.42
date	99.06.03.01.18.05;	author mud;	state Exp;
branches;
next	1.41;

1.41
date	99.06.03.01.15.52;	author mud;	state Exp;
branches;
next	1.40;

1.40
date	99.06.03.01.03.02;	author mud;	state Exp;
branches;
next	1.39;

1.39
date	99.05.18.18.26.15;	author mud;	state Exp;
branches;
next	1.38;

1.38
date	99.05.18.18.19.00;	author mud;	state Exp;
branches;
next	1.37;

1.37
date	99.05.15.16.39.05;	author mud;	state Exp;
branches;
next	1.36;

1.36
date	99.05.04.00.43.32;	author mud;	state Exp;
branches;
next	1.35;

1.35
date	99.05.03.08.00.22;	author mud;	state Exp;
branches;
next	1.34;

1.34
date	99.04.24.12.57.41;	author mud;	state Exp;
branches;
next	1.33;

1.33
date	99.04.23.23.43.45;	author mud;	state Exp;
branches;
next	1.32;

1.32
date	99.04.23.02.28.44;	author mud;	state Exp;
branches;
next	1.31;

1.31
date	99.04.14.23.01.15;	author mud;	state Exp;
branches;
next	1.30;

1.30
date	99.04.14.22.49.32;	author mud;	state Exp;
branches;
next	1.29;

1.29
date	99.03.30.15.27.43;	author mud;	state Exp;
branches;
next	1.28;

1.28
date	99.01.18.17.38.48;	author mud;	state Exp;
branches;
next	1.27;

1.27
date	99.01.18.16.56.49;	author mud;	state Exp;
branches;
next	1.26;

1.26
date	98.12.13.03.17.12;	author mud;	state Exp;
branches;
next	1.25;

1.25
date	98.12.09.08.32.19;	author mud;	state Exp;
branches;
next	1.24;

1.24
date	98.12.07.12.58.17;	author mud;	state Exp;
branches;
next	1.23;

1.23
date	98.11.28.07.49.38;	author mud;	state Exp;
branches;
next	1.22;

1.22
date	98.11.27.07.35.58;	author mud;	state Exp;
branches;
next	1.21;

1.21
date	98.11.15.00.31.36;	author mud;	state Exp;
branches;
next	1.20;

1.20
date	98.11.14.07.15.54;	author mud;	state Exp;
branches;
next	1.19;

1.19
date	98.10.17.07.12.13;	author mud;	state Exp;
branches;
next	1.18;

1.18
date	98.10.12.21.39.18;	author mud;	state Exp;
branches;
next	1.17;

1.17
date	98.10.12.21.21.49;	author mud;	state Exp;
branches;
next	1.16;

1.16
date	98.10.12.20.44.37;	author mud;	state Exp;
branches;
next	1.15;

1.15
date	98.10.11.00.13.37;	author mud;	state Exp;
branches;
next	1.14;

1.14
date	98.10.09.04.33.34;	author mud;	state Exp;
branches;
next	1.13;

1.13
date	98.10.09.03.30.16;	author mud;	state Exp;
branches;
next	1.12;

1.12
date	98.10.09.03.19.45;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	98.10.09.02.30.17;	author mud;	state Exp;
branches;
next	1.10;

1.10
date	98.10.08.14.14.25;	author mud;	state Exp;
branches;
next	1.9;

1.9
date	98.09.20.03.46.48;	author mud;	state Exp;
branches;
next	1.8;

1.8
date	98.08.30.03.33.40;	author mud;	state Exp;
branches;
next	1.7;

1.7
date	98.08.21.14.21.12;	author mud;	state Exp;
branches;
next	1.6;

1.6
date	98.08.21.00.52.15;	author mud;	state Exp;
branches;
next	1.5;

1.5
date	98.08.20.21.05.39;	author mud;	state Exp;
branches;
next	1.4;

1.4
date	98.08.12.08.20.22;	author mud;	state Exp;
branches;
next	1.3;

1.3
date	98.08.07.20.20.03;	author mud;	state Exp;
branches;
next	1.2;

1.2
date	98.08.05.08.14.37;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	98.06.16.17.49.43;	author mud;	state Exp;
branches;
next	;


desc
@@


1.187
log
@got rid of hte rest of the clan skills
corey
@
text
@/***************************************************************************
 *  Original Diku Mud copyright (C) 1990, 1991 by Sebastian Hammer,        *
 *  Michael Seifert, Hans Henrik St{rfeldt, Tom Madsen, and Katja Nyboe.   * 
 *                                                                         *
 *  Merc Diku Mud improvments copyright (C) 1992, 1993 by Michael          *
 *  Chastain, Michael Quan, and Mitchell Tse.                              *
 *                                                                         *
 *  In order to use any part of this Merc Diku Mud, you must comply with   *
 *  both the original Diku license in 'license.doc' as well the Merc       *
 *  license in 'license.txt'.  In particular, you may not remove either of *
 *  these copyright notices.                                               *
 *                                                                         *
 *  Much time and thought has gone into this software and you are          *
 *  benefitting.  We hope that you share your changes too.  What goes      *
 *  around, comes around.                                                  *
 ***************************************************************************/

static char rcsid[] = "$Id: save.c,v 1.186 2003/06/14 19:53:12 boogums Exp $";
#if defined(macintosh)
#include <types.h>
#else
#include <sys/types.h>
#endif
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
/*#include <malloc.h>*/
#include <stdlib.h>
#include "merc.h"
#include "recycle.h"
#include "lookup.h"
#include "tables.h"
 
#if !defined(macintosh)
extern  int     _filbuf         args( (FILE *) );
#endif


int rename(const char *oldfname, const char *newfname);

/*
 * Array of containers read for proper re-nesting of objects.
 */
#define MAX_NEST  100
static  OBJ_DATA *  rgObjNest [MAX_NEST];



/*
 * Local functions.
 */
 void 	convert_bits	args( ( CHAR_DATA *ch ) );
void  fwrite_char args( ( CHAR_DATA *ch,  FILE *fp ) );
void  fwrite_obj  args( ( CHAR_DATA *ch,  OBJ_DATA  *obj,
          FILE *fp, int iNest ) );
void  fwrite_pet  args( ( CHAR_DATA *pet, FILE *fp) );
void  fread_char  args( ( CHAR_DATA *ch,  FILE *fp ) );
void    fread_pet args( ( CHAR_DATA *ch,  FILE *fp ) );
void  fread_obj args( ( CHAR_DATA *ch,  FILE *fp ) );


/*
 * Piddly converter by Ben
 * Rusty made me do it
 */
#define COMM_COMPACT		(L) 
#define COMM_BRIEF		(M)
#define COMM_PROMPT		(N)
#define COMM_SHOW_AFFECTS	(Q)
#define COMM_DISP_VNUM		(T)
#define PLR_LONGEQ		(O)
#define PLR_COLOR		(bb)
#define COMM_COMBINE		(O)
void convert_bits( CHAR_DATA *ch )
{
   if ( IS_SET(ch->comm,COMM_COMPACT) )
   {
	REMOVE_BIT(ch->comm,COMM_COMPACT);
	SET_BIT(ch->display,DISP_COMPACT);
   }

   if ( IS_SET(ch->comm,COMM_BRIEF) )
   {
	REMOVE_BIT(ch->comm,COMM_BRIEF);
	SET_BIT(ch->display,DISP_BRIEF_DESCR);
   }

   if ( IS_SET(ch->comm,COMM_PROMPT) )
   {
	REMOVE_BIT(ch->comm,COMM_PROMPT);
	SET_BIT(ch->display,DISP_PROMPT);
   }

   if ( IS_SET(ch->comm,COMM_SHOW_AFFECTS) )
   {
       REMOVE_BIT(ch->comm,COMM_SHOW_AFFECTS);
       SET_BIT(ch->display,DISP_SHOW_AFFECTS);
   }

   if ( IS_SET(ch->comm,COMM_DISP_VNUM) )
   {
       REMOVE_BIT(ch->comm,COMM_DISP_VNUM);
       SET_BIT(ch->display,DISP_DISP_VNUM);
   }

   if ( IS_SET(ch->act,PLR_LONGEQ) )
   {
       REMOVE_BIT(ch->act,PLR_LONGEQ);
       SET_BIT(ch->display,DISP_BRIEF_EQLIST);
   }

   if ( IS_SET(ch->act,PLR_COLOR) )
   {
       REMOVE_BIT(ch->act,PLR_COLOR);
       SET_BIT(ch->display,DISP_COLOR);
   }

   ch->version = 9;
   return;
}
#undef COMM_COMPACT
#undef COMM_BRIEF
#undef COMM_PROMPT
#undef COMM_SHOW_AFFECTS
#undef COMM_DISP_VNUM
#undef PLR_LONGEQ
#undef PLR_COLOR
#undef COMM_COMBINE


/*
 * Save a character and inventory.
 * Would be cool to save NPC's too for quest purposes,
 *   some of the infrastructure is provided.
 */
void save_char_obj( CHAR_DATA *ch )
{
    char strsave[MAX_INPUT_LENGTH],buf[MAX_STRING_LENGTH];
    FILE *fp;

    if ( IS_NPC(ch) )
  return;

#ifdef OLC_VERSION
return;
#endif

 /* Don't save if the character is invalidated. */
 if ( !IS_VALID(ch)) {
     bug("save_char_obj: Trying to save an invalidated character.\n", 0);
     return;
 }

    sprintf(buf,"SCO Saving: %s.",ch->name);
    log_string(buf);

    if ( (ch->desc != NULL) && (ch->desc->original != NULL) )
    ch = ch->desc->original;

#if defined(unix)
    /* create god log */
    if (IS_IMMORTAL(ch) || ch->level >= LEVEL_IMMORTAL)
    {
  fclose(fpReserve);
  sprintf(strsave, "%s%s",GOD_DIR, capitalize(ch->name));
  if ((fp = fopen(strsave,"w")) == NULL)
  {
      bug("Save_char_obj: fopen",0);
      perror(strsave);
  }

  fprintf(fp,"Lev %2d Trust %2d  %s%s\n",
      ch->level, get_trust(ch), ch->name, ch->pcdata->title);
  fclose( fp );
  fpReserve = fopen( NULL_FILE, "r" );
    }
#endif

    fclose( fpReserve );
    sprintf( strsave, "%s%s", PLAYER_DIR, capitalize( ch->name ) );
    if ( ( fp = fopen( TEMP_FILE, "w" ) ) == NULL )
    {
  bug( "Save_char_obj: fopen", 0 );
  perror( strsave );
    }
    else
    {
  fwrite_char( ch, fp );
  if ( ch->carrying != NULL )
      fwrite_obj( ch, ch->carrying, fp, 0 );
  /* save the pets */
  if (ch->pet != NULL && ch->pet->in_room == ch->in_room)
      fwrite_pet(ch->pet,fp);
  fprintf( fp, "#END\n" );
    }
    fclose( fp );
    rename(TEMP_FILE,strsave);
/*
    sprintf(buf,"mv %s %s",PLAYER_TEMP,strsave);
    system(buf);
*/
    fpReserve = fopen( NULL_FILE, "r" );
    return;
}



/*
 * Write the char.
 */
void fwrite_char( CHAR_DATA *ch, FILE *fp )
{
    AFFECT_DATA *paf;
    int sn, gn, pos;
    MACRO_DATA *macro;

    fprintf( fp, "#%s\n", IS_NPC(ch) ? "MOB" : "PLAYER" );

    fprintf( fp, "Name %s~\n",  ch->name    );
    if ( !IS_NPC(ch) && ch->pcdata->surname != NULL )
	fprintf( fp, "SurN %s~\n", ch->pcdata->surname );
    fprintf( fp, "Id   %ld\n", ch->id     );
    fprintf( fp, "Email %s~\n", ch->pcdata->email );
    fprintf( fp, "LogO %ld\n",  current_time    );
    fprintf( fp, "Vers %d\n",   31   );
    if (ch->short_descr[0] != '\0')
        fprintf( fp, "ShD  %s~\n",  ch->short_descr );
    if( ch->long_descr[0] != '\0')
  fprintf( fp, "LnD  %s~\n",  ch->long_descr  );
    if (ch->description[0] != '\0')
      fprintf( fp, "Desc %s~\n",  ch->description );
    if (ch->prompt != NULL || !str_cmp(ch->prompt,"%h %m %v%c> "))
        fprintf( fp, "Prom %s~\n",      ch->prompt    );
    fprintf( fp, "Race %s~\n", pc_race_table[ch->race].name );
    if (ch->clan)
      fprintf( fp, "Clan %s~\n",clan_table[ch->clan].name);
    if (ch->pcdata->save_clan)
      fprintf( fp, "SaveClan %s~\n",clan_table[ch->pcdata->save_clan].name);
    fprintf( fp, "Outc %d\n",   ch->pcdata->outcT );
    fprintf( fp, "RufT %d\n",   ch->pcdata->ruffT );
    fprintf( fp, "MatookT %d\n",   ch->pcdata->matookT );
    if(ch->pcdata->abolish_timer != 0 )
    fprintf( fp, "Abol %d\n", ch->pcdata->abolish_timer );
    if(ch->pcdata->mutant_timer != 0 )
    fprintf( fp, "Mutant %d\n", ch->pcdata->mutant_timer );
    fprintf( fp, "SkPTimer %d\n", ch->pcdata->skill_point_timer);
    fprintf( fp, "SkPTracker %d\n", ch->pcdata->skill_point_tracker);
    if (!IS_NPC(ch))
    fprintf( fp, "LogoutTracker %d\n", ch->pcdata->logout_tracker);
    if(ch->pcdata->hostmask[0] != '\0')
      fprintf( fp, "Hstm %s~\n", ch->pcdata->hostmask );
    fprintf( fp, "Kill %d %d %d %d\n",
                ch->pcdata->killer_data[PC_LOWER_KILLS],
                ch->pcdata->killer_data[PC_EQUAL_KILLS],
                ch->pcdata->killer_data[PC_GREATER_KILLS],
		ch->pcdata->killer_data[PC_DEATHS]); 
    fprintf( fp, "Steal %ld %ld %ld\n",
		ch->pcdata->steal_data[PC_STOLEN_ITEMS],
		ch->pcdata->steal_data[PC_STOLEN_GOLD],
		ch->pcdata->steal_data[PC_SLICES]);
    fprintf( fp, "LstK %s~\n", ch->pcdata->last_kill );
    fprintf( fp, "LstKBy %s~\n", ch->pcdata->last_killed_by );
    fprintf( fp, "LstAtkedBy %s~\n", ch->pcdata->last_attacked_by );
    fprintf( fp, "LstAtkedByTimer %d\n", ch->pcdata->last_attacked_by_timer );
    fprintf( fp, "LstCombatDate %d\n", ch->pcdata->last_combat_date );
    fprintf( fp, "LstKillDate %d\n", ch->pcdata->last_kill_date );
    fprintf( fp, "LstDeathDate %d\n", ch->pcdata->last_death_date );
    fprintf( fp, "LoginsWOKill %d\n", ch->pcdata->logins_without_kill );
    fprintf( fp, "LoginsWODeath %d\n", ch->pcdata->logins_without_death);
    fprintf( fp, "LoginsWOCombat %d\n", ch->pcdata->logins_without_combat );
    fprintf( fp, "Bnty %ld\n", ch->pcdata->bounty );
 /*
    if(IS_SET(ch->mhs,MHS_SAVANT))
       fprintf(fp,"Savant %d\n",ch->pcdata->savant );
 */
    if(IS_SET(ch->mhs,MHS_HIGHLANDER))
       fprintf(fp,"High %d %d\n",ch->pcdata->highlander_data[ALL_KILLS],
          ch->pcdata->highlander_data[REAL_KILLS]);
    if(IS_SET(ch->mhs,MHS_SHAPESHIFTED))
       fprintf(fp,"Shift %d %d %d %d %d %d %d %d %d~\n",
	  ch->save_race,
          ch->save_con_mod,
	  ch->save_stat[STAT_STR],
	  ch->save_stat[STAT_INT],
	  ch->save_stat[STAT_WIS],
	  ch->save_stat[STAT_DEX],
	  ch->save_stat[STAT_CON],
          ch->save_stat[STAT_AGT],
          ch->save_stat[STAT_END],
          ch->save_stat[STAT_SOC]);
    fprintf( fp, "Deity %d %s~\n",
	       ch->pcdata->switched,deity_table[ch->pcdata->deity].name);
    if (ch->pcdata->deity_timer != 0 )
	fprintf(fp, "DeityT %d %s~\n", ch->pcdata->deity_timer, deity_table[ch->pcdata->new_deity].name);
    fprintf( fp, "Sac  %d\n", ch->pcdata->sac     );
    fprintf( fp, "Sex  %d\n", ch->sex     );
    fprintf( fp, "Vump  %d\n", ch->trumps );
    fprintf( fp, "Node %d\n", ch->pcdata->node );
    fprintf( fp, "Cap %d\n", ch->pcdata->capped );
    fprintf( fp, "Created %d\n", ch->pcdata->created_date );
    fprintf( fp, "Glad %d %d %d %d %d %d\n", 
           ch->pcdata->gladiator_data[GLADIATOR_VICTORIES],
           ch->pcdata->gladiator_data[GLADIATOR_KILLS],
           ch->pcdata->gladiator_data[GLADIATOR_TEAM_VICTORIES],
           ch->pcdata->gladiator_data[GLADIATOR_TEAM_KILLS],
           ch->pcdata->gladiator_data[GLADIATOR_PLAYS],
           ch->pcdata->gladiator_data[GLADIATOR_TEAM_PLAYS]);

    /* Save the Last Host logged in from to the Pfiles - Poquah */
    /* If the Desc is NULL don't save since its probably Link Dead
       Anyways, this way we'll save the socket from previous as well
       this covers Ploaded chars */
    if (ch->desc != NULL)
    {
       ch->pcdata->last_host = str_dup(ch->desc->host);
       fprintf( fp, "LastHost %s~\n", ch->pcdata->last_host);
    }

    fprintf( fp, "Cla  %d\n", ch->class   );
    if ( ch->kit )
    fprintf( fp, "Kit %s~\n", kit_table[ch->kit].name );
    fprintf( fp, "ClaO %d\n", ch->pcdata->old_class );
    fprintf( fp, "Levl %d\n", ch->level   );
    fprintf( fp, "DLevl %d\n", ch->pcdata->debit_level );
    if (ch->trust != 0)
  fprintf( fp, "Tru  %d\n", ch->trust );
    fprintf( fp, "Plyd %d\n",
  ch->played + (int) (current_time - ch->logon) );
  /*
    fprintf( fp, "Rdid %d\n", ch->redid);
    */
    fprintf( fp, "Not  %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\n",    
  ch->pcdata->last_note,ch->pcdata->last_idea,ch->pcdata->last_penalty,
  ch->pcdata->last_news,ch->pcdata->last_changes,ch->pcdata->last_ooc,  
  ch->pcdata->last_bug, ch->pcdata->last_cnote , ch->pcdata->last_immnote, 
  ch->pcdata->last_qnote);
    fprintf( fp, "Scro %d\n",   ch->lines   );
    fprintf( fp, "Rank %d\n",   ch->pcdata->rank);
    fprintf( fp, "Room %d\n",
        (  ch->in_room == get_room_index( ROOM_VNUM_LIMBO )
        && ch->was_in_room != NULL )
            ? ch->was_in_room->vnum
            : ch->in_room == NULL ? 3001 : ch->in_room->vnum );

    fprintf( fp, "HMV  %d %d %d %d %d %d\n",
  ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move, ch->max_move );
    if (ch->gold > 0)
      fprintf( fp, "Gold %ld\n",  ch->gold    );
    else
      fprintf( fp, "Gold %d\n", 0     ); 
    if (ch->silver > 0)
  fprintf( fp, "Silv %ld\n",ch->silver    );
    else
  fprintf( fp, "Silv %d\n",0      );
    if (ch->in_bank > 0)
  fprintf( fp, "Bank %d\n", ch->in_bank );
    fprintf( fp, "Exp  %d\n", ch->exp     );
    if (ch->act != 0)
  fprintf( fp, "Act  %s\n",   print_flags(ch->act));
    if (ch->mhs != 0)
  fprintf( fp, "MHSF %s\n",	print_flags(ch->mhs));
    if (ch->pcdata->clan_flags != 0)
  fprintf(fp, "ClnF %s\n",      print_flags(ch->pcdata->clan_flags));
    if (ch->affected_by != 0)
  fprintf( fp, "AfBy %s\n",   print_flags(ch->affected_by));
    fprintf( fp, "Comm %s\n",       print_flags(ch->comm));
    fprintf( fp, "Disp %s\n",	print_flags(ch->display));
    fprintf( fp, "IcgB %s\n", print_flags(ch->icg_bits));
    fprintf( fp, "Icg %d\n", ch->icg);
    /*
    fprintf( fp, "IMC %s\n",        print_flags(ch->pcdata->imc_deaf));
    fprintf( fp, "IMCAllow %s\n",   print_flags(ch->pcdata->imc_allow));
    fprintf( fp, "IMCDeny %s\n",    print_flags(ch->pcdata->imc_deny));
    fprintf( fp, "ICEListen %s~\n", ch->pcdata->ice_listen);
     */
    if (ch->wiznet)
      fprintf( fp, "Wizn %s\n",   print_flags(ch->wiznet));
    if (ch->pnet)
      fprintf( fp, "Pnet %s\n",   print_flags(ch->pnet));
    if (ch->invis_level)
  fprintf( fp, "Invi %d\n",   ch->invis_level );
    if (ch->incog_level)
  fprintf(fp,"Inco %d\n",ch->incog_level);
    fprintf( fp, "Pos  %d\n", 
  ch->position == POS_FIGHTING ? POS_STANDING : ch->position );
    if (ch->practice != 0)
      fprintf( fp, "Prac %d\n", ch->practice  );
    if (ch->train != 0)
  fprintf( fp, "Trai %d\n", ch->train );
    if (ch->skill_points != 0 )
	fprintf( fp, "SkiP %d\n", ch->skill_points );
    if (ch->saving_throw != 0)
  fprintf( fp, "Save  %d\n",  ch->saving_throw);
    fprintf( fp, "Alig  %d\n",  ch->alignment   );
    if (ch->hitroll != 0)
  fprintf( fp, "Hit   %d\n",  ch->hitroll );
    if (ch->damroll != 0)
  fprintf( fp, "Dam   %d\n",  ch->damroll );
    if (ch->pcdata->second_hitroll != 0)
  fprintf( fp, "SecHit   %d\n",  ch->pcdata->second_hitroll );
    if (ch->pcdata->second_damroll != 0)
  fprintf( fp, "SecDam   %d\n",  ch->pcdata->second_damroll );
    fprintf( fp, "ACs %d %d %d %d\n", 
  ch->armor[0],ch->armor[1],ch->armor[2],ch->armor[3]);
    if (ch->wimpy !=0 )
  fprintf( fp, "Wimp  %d\n",  ch->wimpy );
    fprintf( fp, "Attr %d %d %d %d %d %d %d %d\n",
  ch->perm_stat[STAT_STR],
  ch->perm_stat[STAT_INT],
  ch->perm_stat[STAT_WIS],
  ch->perm_stat[STAT_DEX],
  ch->perm_stat[STAT_CON],
  ch->perm_stat[STAT_AGT],
  ch->perm_stat[STAT_END],
  ch->perm_stat[STAT_SOC] );

    fprintf (fp, "AMod %d %d %d %d %d %d %d %d\n",
  ch->mod_stat[STAT_STR],
  ch->mod_stat[STAT_INT],
  ch->mod_stat[STAT_WIS],
  ch->mod_stat[STAT_DEX],
  ch->mod_stat[STAT_CON],
  ch->mod_stat[STAT_AGT],
  ch->mod_stat[STAT_END],
  ch->mod_stat[STAT_SOC] );
    

    if ( IS_NPC(ch) )
    {
  fprintf( fp, "Vnum %d\n", ch->pIndexData->vnum  );
    }
    else
    {
  fprintf( fp, "Pass %s~\n",  ch->pcdata->pwd   );
  if (ch->pcdata->bamfin[0] != '\0')
      fprintf( fp, "Bin  %s~\n",  ch->pcdata->bamfin);
  if (ch->pcdata->bamfout[0] != '\0')
    fprintf( fp, "Bout %s~\n",  ch->pcdata->bamfout);
  fprintf( fp, "Titl %s~\n",  ch->pcdata->title );
      fprintf( fp, "Pnts %d\n",     ch->pcdata->points      );
  if (ch->pcdata->who_name && ch->pcdata->who_name[0])
  fprintf( fp, "WhoName %s~\n", ch->pcdata->who_name );
  fprintf( fp, "TSex %d\n", ch->pcdata->true_sex  );
  fprintf( fp, "LLev %d\n", ch->pcdata->last_level  );
  fprintf( fp, "HMVP %d %d %d\n", ch->pcdata->perm_hit, 
               ch->pcdata->perm_mana,
               ch->pcdata->perm_move);
  fprintf( fp, "Cnd  %d %d %d %d\n",
      ch->pcdata->condition[0],
      ch->pcdata->condition[1],
      ch->pcdata->condition[2],
      ch->pcdata->condition[3] );
      
  if (ch->pcdata->edit.range) {
    VNUM_RANGE_DATA *range;
    
    fprintf (fp,"Edit %s\n",
      print_flags(ch->pcdata->edit.per_flags));
    range = ch->pcdata->edit.range;
    while (range) {
      fprintf (fp,"ERange %d %d\n",range->min,range->max);
      range = range->next;
    }    
  }

  /* write alias */
  
  for (pos = 0; pos < MAX_ALIAS; pos++)
  {
      if (ch->pcdata->alias[pos] == NULL
      ||  ch->pcdata->alias_sub[pos] == NULL)
    break;

      fprintf(fp,"Alias %s %s~\n",ch->pcdata->alias[pos],
        ch->pcdata->alias_sub[pos]);
  }
  
  /* write macros */
  macro = ch->pcdata->macro;
  while (macro) {
    fprintf (fp,"Macro %s %s~\n",macro->name,macro->text);
    macro = macro->next;
  }    

  if ( ch->species_enemy )
	fprintf(fp,"SpecEn %d\n", ch->species_enemy );

  if ( ch->pcdata->specialize )
	fprintf(fp, "Spz '%s'\n", skill_table[ch->pcdata->specialize].name);

  for ( sn = 0; sn < MAX_SKILL; sn++ )
  {
      if ( skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0 )
      {
    fprintf( fp, "Sk %d '%s'\n",
        ch->pcdata->learned[sn], skill_table[sn].name );
      }

      if ( skill_table[sn].name != NULL && ch->pcdata->old_learned[sn] > 0 )
      {
    fprintf( fp, "OldSk %d '%s'\n",
        ch->pcdata->old_learned[sn], skill_table[sn].name );
      }
  }

  for ( gn = 0; gn < MAX_GROUP; gn++ )
        {
            if ( group_table[gn].name != NULL && ch->pcdata->group_known[gn])
            {
                fprintf( fp, "Gr '%s'\n",group_table[gn].name);
            }
        }
    }

    for ( paf = ch->affected; paf != NULL; paf = paf->next )
    {
  if ((paf->type < 0) || (paf->type >= MAX_SKILL) )
      continue;
  
  fprintf( fp, "Affc '%s' %3d %3d %3d %3d %3d %10ld\n",
      skill_table[paf->type].name,
      paf->where,
      paf->level,
      paf->duration,
      paf->modifier,
      paf->location,
      paf->bitvector
      );
    }

    fprintf( fp, "End\n\n" );
    return;
}

/* write a pet */
void fwrite_pet( CHAR_DATA *pet, FILE *fp)
{
    AFFECT_DATA *paf;
    
    fprintf(fp,"#PET\n");
    
    fprintf(fp,"Vnum %d\n",pet->pIndexData->vnum);
    
    fprintf(fp,"Name %s~\n", pet->name);
    fprintf(fp,"LogO %ld\n", current_time);
    if (pet->short_descr != pet->pIndexData->short_descr)
      fprintf(fp,"ShD  %s~\n", pet->short_descr);
    if (pet->long_descr != pet->pIndexData->long_descr)
      fprintf(fp,"LnD  %s~\n", pet->long_descr);
    if (pet->description != pet->pIndexData->description)
      fprintf(fp,"Desc %s~\n", pet->description);
    if (pet->race != pet->pIndexData->race)
      fprintf(fp,"Race %s~\n", race_table[pet->race].name);
    fprintf(fp,"Sex  %d\n", pet->sex);
    if (pet->level != pet->pIndexData->level)
      fprintf(fp,"Levl %d\n", pet->level);
    fprintf(fp, "HMV  %d %d %d %d %d %d\n",
      pet->hit, pet->max_hit, pet->mana, pet->max_mana, pet->move, pet->max_move);
    if (pet->gold > 0)
      fprintf(fp,"Gold %ld\n",pet->gold);
    if (pet->silver > 0)
  fprintf(fp,"Silv %ld\n",pet->silver);
    if (pet->exp > 0)
      fprintf(fp, "Exp  %d\n", pet->exp);
    if (pet->act != pet->pIndexData->act)
      fprintf(fp, "Act  %s\n", print_flags(pet->act));
    if (pet->affected_by != pet->pIndexData->affected_by)
      fprintf(fp, "AfBy %s\n", print_flags(pet->affected_by));
    if (pet->comm != 0)
      fprintf(fp, "Comm %s\n", print_flags(pet->comm));
    fprintf(fp,"Pos  %d\n", pet->position = POS_FIGHTING ? POS_STANDING : pet->position);
    if (pet->saving_throw != 0)
      fprintf(fp, "Save %d\n", pet->saving_throw);
    if (pet->alignment != pet->pIndexData->alignment)
      fprintf(fp, "Alig %d\n", pet->alignment);
    if (pet->hitroll != pet->pIndexData->hitroll)
      fprintf(fp, "Hit  %d\n", pet->hitroll);
    if (pet->damroll != pet->pIndexData->damage[DICE_BONUS])
      fprintf(fp, "Dam  %d\n", pet->damroll);
    fprintf(fp, "ACs  %d %d %d %d\n",
      pet->armor[0],pet->armor[1],pet->armor[2],pet->armor[3]);
    fprintf(fp, "Attr %d %d %d %d %d %d %d %d\n",
      pet->perm_stat[STAT_STR], pet->perm_stat[STAT_INT],
      pet->perm_stat[STAT_WIS], pet->perm_stat[STAT_DEX],
      pet->perm_stat[STAT_CON], pet->perm_stat[STAT_AGT],
      pet->perm_stat[STAT_END], pet->perm_stat[STAT_SOC]);
    fprintf(fp, "AMod %d %d %d %d %d %d %d %d\n",
      pet->mod_stat[STAT_STR], pet->mod_stat[STAT_INT],
      pet->mod_stat[STAT_WIS], pet->mod_stat[STAT_DEX],
      pet->mod_stat[STAT_CON], pet->mod_stat[STAT_AGT],
      pet->mod_stat[STAT_END], pet->mod_stat[STAT_SOC]);
    
    for ( paf = pet->affected; paf != NULL; paf = paf->next )
    {
      if (paf->type < 0 || paf->type >= MAX_SKILL)
          continue;
          
      fprintf(fp, "Affc '%s' %3d %3d %3d %3d %3d %10ld\n",
          skill_table[paf->type].name,
          paf->where, paf->level, paf->duration, paf->modifier,paf->location,
          paf->bitvector);
    }
    
    fprintf(fp,"End\n");
    return;
}
    
/*
 * Write an object and its contents.
 */
void fwrite_obj( CHAR_DATA *ch, OBJ_DATA *obj, FILE *fp, int iNest )
{
    EXTRA_DESCR_DATA *ed;
    AFFECT_DATA *paf;
	int sent;

    /*
     * Slick recursion to write lists backwards,
     *   so loading them will load in forwards order.
     */
    if ( obj->next_content != NULL )
  fwrite_obj( ch, obj->next_content, fp, iNest );
  
  
   /*
    * Don't save under developed items
    */
    if (obj->pIndexData->area && obj->pIndexData->area->under_develop 
        && !IS_IMMORTAL (ch)) {
      char buf[MAX_STRING_LENGTH];

      sprintf (buf,"Item [%d] under construction saving %s.",
        obj->pIndexData->vnum, capitalize (ch->name));
      log_string ( buf );
      return;
    }  

    /*
     * Castrate storage characters.
     * PFresh Characters within their login limit do not apply.
     */
    if  (!IS_NPC(ch))
    if (ch->pcdata->logout_tracker == 0)
    {
       if ( ((ch->level < obj->level - 2 && obj->item_type != ITEM_CONTAINER)
	    || ( obj->item_type == ITEM_KEY && obj->wear_loc == -1 )
            || ( obj->item_type == ITEM_MAP && !obj->value[0]) ))
          return;

    }

    fprintf( fp, "#O\n" );
    fprintf( fp, "Vnum %d\n",   obj->pIndexData->vnum        );
    if (!obj->pIndexData->new_format)
  fprintf( fp, "Oldstyle\n");
    if (obj->enchanted)
  fprintf( fp,"Enchanted\n");
    fprintf( fp, "Nest %d\n", iNest          );
    fprintf( fp, "PrevOwner %s~\n", obj->prev_owner);

    /* these data are only used if they do not match the defaults */

    if ( obj->name != obj->pIndexData->name)
      fprintf( fp, "Name %s~\n",  obj->name        );
    if ( obj->short_descr != obj->pIndexData->short_descr)
        fprintf( fp, "ShD  %s~\n",  obj->short_descr       );
    if ( obj->description != obj->pIndexData->description)
        fprintf( fp, "Desc %s~\n",  obj->description       );
    if ( obj->extra_flags != obj->pIndexData->extra_flags)
        fprintf( fp, "ExtF %d\n", obj->extra_flags       );
    if ( obj->wear_flags != obj->pIndexData->wear_flags)
        fprintf( fp, "WeaF %d\n", obj->wear_flags        );
    if ( obj->item_type != obj->pIndexData->item_type)
        fprintf( fp, "Ityp %d\n", obj->item_type         );
    if ( obj->stolen_timer != 0 )
        fprintf( fp, "Stolen %d\n", obj->stolen_timer    );
    if ( obj->weight != obj->pIndexData->weight)
        fprintf( fp, "Wt   %d\n", obj->weight        );
    if ( obj->warps != 0 )
	fprintf( fp, "Wrp %d\n", obj->warps	);
    if ( obj->condition != obj->pIndexData->condition)
  fprintf( fp, "Cond %d\n", obj->condition         );

    /* variable data */

    fprintf( fp, "Wear %d\n",   obj->wear_loc                );
    if (obj->level != obj->pIndexData->level)
        fprintf( fp, "Lev  %d\n", obj->level         );
    if (obj->timer != 0)
        fprintf( fp, "Time %d\n", obj->timer       );
    if (obj->wear_timer != 0)
        fprintf( fp, "WearTime %d\n", obj->wear_timer       );
    fprintf( fp, "Cost %d\n", obj->cost        );
    if (obj->value[0] != obj->pIndexData->value[0]
    ||  obj->value[1] != obj->pIndexData->value[1]
    ||  obj->value[2] != obj->pIndexData->value[2]
    ||  obj->value[3] != obj->pIndexData->value[3]
    ||  obj->value[4] != obj->pIndexData->value[4]) 
      fprintf( fp, "Val  %d %d %d %d %d\n",
      obj->value[0], obj->value[1], obj->value[2], obj->value[3],
      obj->value[4]      );

    switch ( obj->item_type )
    {
    case ITEM_POTION:
    case ITEM_SCROLL:
  if ( obj->value[1] > 0 )
  {
      fprintf( fp, "Spell 1 '%s'\n", 
    skill_table[obj->value[1]].name );
  }

  if ( obj->value[2] > 0 )
  {
      fprintf( fp, "Spell 2 '%s'\n", 
    skill_table[obj->value[2]].name );
  }

  if ( obj->value[3] > 0 )
  {
      fprintf( fp, "Spell 3 '%s'\n", 
    skill_table[obj->value[3]].name );
  }

  break;

    case ITEM_PILL:
    case ITEM_STAFF:
    case ITEM_WAND:
  if ( obj->value[3] > 0 )
  {
      fprintf( fp, "Spell 3 '%s'\n", 
    skill_table[obj->value[3]].name );
  }

  break;
    }

	sent = 0;
    for ( paf = obj->affected; paf != NULL; paf = paf->next )
    {
     if (sent > 20) break;
  if ( (paf->type < 0) || (paf->type >= MAX_SKILL) )
     { sent++;
      continue;
     }
        fprintf( fp, "Affc '%s' %3d %3d %3d %3d %3d %10ld\n",
            skill_table[paf->type].name,
            paf->where,
            paf->level,
            paf->duration,
            paf->modifier,
            paf->location,
            paf->bitvector
            );
    }

    for ( ed = obj->extra_descr; ed != NULL; ed = ed->next )
    {
  fprintf( fp, "ExDe %s~ %s~\n",
      ed->keyword, ed->description );
    }

    fprintf( fp, "End\n\n" );

    if ( obj->contains != NULL )
  fwrite_obj( ch, obj->contains, fp, iNest + 1 );

    return;
}



/*
 * Load a char and inventory into a new ch structure.
 */
bool load_char_obj( DESCRIPTOR_DATA *d, char *name )
{
    char strsave[MAX_INPUT_LENGTH];
    CHAR_DATA *ch;
    FILE *fp;
    bool found;
    int stat;
    int sn;

    ch = new_char();
    ch->pcdata = new_pcdata();

    d->character      = ch;
    ch->desc        = d;
    ch->name        = str_dup( name );
    ch->id        = get_pc_id();
    ch->race        = race_lookup("human");
    ch->ignoring  = NULL;
    ch->pcdata->rank	= 0;
    ch->join    = 0;
    ch->trumps  = 0;
    ch->pcdata->deity   = 0;
    ch->pcdata->outcT   = 0;
    ch->pcdata->ruffT   = 0;
    ch->pcdata->matookT = 0;
    ch->pcdata->skill_point_timer = 0;
    ch->pcdata->skill_point_tracker = 0;
    ch->pcdata->gladiator_attack_timer = 0;
    ch->pcdata->gladiator_team = 0;
    ch->pcdata->last_attacked_by_timer = 0;
    ch->pcdata->last_death_timer = 0; /* we dont save this timer, it resets on logout */
    ch->pcdata->last_death_date = current_time; 
    ch->pcdata->last_kill_date = current_time; 
    ch->pcdata->last_combat_date = current_time; 
    ch->pcdata->logins_without_kill = 0; 
    ch->pcdata->logins_without_death = 0; 
    ch->pcdata->logins_without_combat = 0; 
    ch->pcdata->afk_counter = 0;
    ch->pcdata->died_today = FALSE;
    ch->pcdata->killed_today = FALSE;

    /* Set up for Pfrsh Old Skills, new chars just have 0's
       whereas old chars will populate this with the pfresh 
       in comm.c and then they will be saved off and loaded
       each time */
    for ( sn = 0; sn < MAX_SKILL; sn++ )
    {
       ch->pcdata->old_learned[sn] = 0;
    }

    ch->pcdata->logout_tracker = 0;
    ch->pcdata->hostmask[0] = '\0';
    /*
    ch->redid   = 0;
    */
    ch->pcdata->killer_data[0] = 0;
    ch->pcdata->killer_data[1] = 0;
    ch->pcdata->killer_data[2] = 0;
    ch->pcdata->killer_data[3] = 0;
    ch->pcdata->steal_data[0] = 0;
    ch->pcdata->steal_data[1] = 0;
    ch->pcdata->steal_data[2] = 0;
    ch->pcdata->highlander_data[0] = 0;
    ch->pcdata->highlander_data[1] = 0;
    ch->pcdata->gladiator_data[0] = 0;
    ch->pcdata->gladiator_data[1] = 0;
    ch->pcdata->gladiator_data[2] = 0;
    ch->pcdata->gladiator_data[3] = 0;
    ch->pcdata->gladiator_data[4] = 0;
    ch->pcdata->gladiator_data[5] = 0;
    ch->pcdata->save_clan = 0;
    ch->pcdata->switched   = 0;
    ch->pcdata->sac     = 0;
    ch->icg     = 0;
    ch->icg_bits = 0;
    ch->act       = PLR_NOSUMMON | PLR_AUTOASSIST | PLR_AUTOEXIT |
      PLR_AUTOLOOT | PLR_AUTOSAC | PLR_AUTOGOLD   |PLR_AUTOSPLIT;
    ch->comm	= 0;
    ch->display		= DISP_COMBINE | DISP_PROMPT | DISP_SURNAME;
    ch->prompt        = str_dup("%h %m %v%c> ");
    ch->pcdata->confirm_delete    = FALSE;
    ch->pcdata->confirm_loner     = FALSE;
    ch->pcdata->pwd     = str_dup( "" );
    ch->pcdata->bamfin      = str_dup( "" );
    ch->pcdata->bamfout     = str_dup( "" );
    ch->pcdata->last_kill = str_dup( "no one" );
    ch->pcdata->last_killed_by = str_dup( "no one" );
    ch->pcdata->title     = str_dup( "" );
    ch->pcdata->who_name  = str_dup( "" );
    for (stat =0; stat < MAX_STATS; stat++)
  ch->perm_stat[stat]   = 13;
    ch->pcdata->condition[COND_THIRST]  = 48; 
    ch->pcdata->condition[COND_FULL]  = 48;
    ch->pcdata->condition[COND_HUNGER]  = 48;
    ch->pcdata->second_hitroll = 0;
    ch->pcdata->second_damroll = 0;

    found = FALSE;
    fclose( fpReserve );
    
    sprintf( strsave, "%s%s", PLAYER_DIR, capitalize( name ) );
    if ( ( fp = fopen( strsave, "r" ) ) != NULL )
    {
  int iNest;

  for ( iNest = 0; iNest < MAX_NEST; iNest++ )
      rgObjNest[iNest] = NULL;

  found = TRUE;
  for ( ; ; )
  {
      char letter;
      char *word;

      letter = fread_letter( fp );
      if ( letter == '*' )
      {
    fread_to_eol( fp );
    continue;
      }

      if ( letter != '#' )
      {
    bug( "Load_char_obj: # not found.", 0 );
    break;
      }

      word = fread_word( fp );
      if      ( !str_cmp( word, "PLAYER" ) ) fread_char ( ch, fp ); 
      else if ( !str_cmp( word, "OBJECT" ) ) fread_obj  ( ch, fp );
      else if ( !str_cmp( word, "O"      ) ) fread_obj  ( ch, fp );
      else if ( !str_cmp( word, "PET"    ) ) fread_pet  ( ch, fp );
      else if ( !str_cmp( word, "END"    ) ) break;
      else
      {
    bug( "Load_char_obj: bad section.", 0 );
    break;
      }
  }
  fclose( fp );
    }
    fpReserve = fopen( NULL_FILE, "r" );


    /* initialize race */
    if (found)
    {
  int i;

  if (ch->race == 0)
      ch->race = race_lookup("human");

  ch->size = pc_race_table[ch->race].size;
  ch->dam_type = 17; /*punch */

  for (i = 0; i < 5; i++)
  {
      if (IS_SET(ch->mhs,MHS_SHAPESHIFTED) && ch->race != ch->save_race)
      {
         if (pc_race_table[ch->save_race].skills[i] == NULL)
            break;
         group_add(ch,pc_race_table[ch->save_race].skills[i],FALSE);
      }
      else
      {
         if (pc_race_table[ch->race].skills[i] == NULL)
	    break;
         group_add(ch,pc_race_table[ch->race].skills[i],FALSE);
      }
  }
  ch->affected_by = ch->affected_by|race_table[ch->race].aff;
  ch->imm_flags = ch->imm_flags | race_table[ch->race].imm;
  ch->res_flags = ch->res_flags | race_table[ch->race].res;
  ch->vuln_flags  = ch->vuln_flags | race_table[ch->race].vuln;
  ch->form  = race_table[ch->race].form;
  ch->parts = race_table[ch->race].parts;
    }

   if ( HAS_KIT(ch,"nethermancer") )
      ch->imm_flags = ch->imm_flags | IMM_NEGATIVE;

    /* Convert bits */
    if (found && ch->version < 9 )
    	convert_bits(ch);

    if (found && ch->version < 11 )
	if ( class_table[ch->class].reclass )
		SET_BIT(ch->act,PLR_CANCLAN);

    if ( found && ch->version < 12 &&
	class_table[ch->class].reclass )
    {  /* Fix old class.  Set to warrior if possible, thief if not */
	if ( ch->class == class_lookup("samurai") ||
	     ch->class == class_lookup("berzerker") ||
	     ch->class == class_lookup("paladin") )
		ch->pcdata->old_class = class_lookup("warrior");
	else
	if ( ch->class == class_lookup("monk") ||
	     ch->class == class_lookup("assassin") )
		ch->pcdata->old_class = class_lookup("thief");
	else
		ch->pcdata->old_class = class_lookup("mage");
    }

    if ( found && !class_table[ch->class].reclass )
	ch->pcdata->old_class = ch->class;

    if ( found && ch->version < 13 && class_table[ch->class].reclass )
	SET_BIT(ch->mhs, MHS_OLD_RECLASS);


    /* RT initialize skills */

    if (found && ch->version < 2)  /* need to add the new skills */
    {
  group_add(ch,"rom basics",FALSE);
  group_add(ch,class_table[ch->class].base_group,FALSE);
  group_add(ch,class_table[ch->class].default_group,TRUE);
  ch->pcdata->learned[gsn_recall] = 50;
    }
 
/********** fix levels 
    if (found && ch->version < 3 && (ch->level > 35 || ch->trust > 35))
    {
  switch (ch->level)
  {
      case(40) : ch->level = 60;  break;
      case(39) : ch->level = 58;  break;
      case(38) : ch->level = 56;  break;
      case(37) : ch->level = 53;  break;
  }

        switch (ch->trust)
        {
            case(40) : ch->trust = 60;  break;
            case(39) : ch->trust = 58;  break;
            case(38) : ch->trust = 56;  break;
            case(37) : ch->trust = 53;  break;
            case(36) : ch->trust = 51;  break;
        }
    }

    if (found && ch->version < 4)
    {
  ch->gold   /= 100;
    }

**************/

    return found;
}



/*
 * Read in a char.
 */

#if defined(KEY)
#undef KEY
#endif

#define KEY( literal, field, value )          \
        if ( !str_cmp( word, literal ) )  \
        {         \
            field  = value;     \
            fMatch = TRUE;      \
            break;        \
        }

void fread_char( CHAR_DATA *ch, FILE *fp )
{
    char buf[MAX_STRING_LENGTH];
    char *word;
    bool fMatch;  
    int lastlogoff = current_time;
    int percent, count = 0;

    sprintf(buf,"Loading %s.",ch->name);
    log_string(buf);

    for ( ; ; )
    {
  word   = feof( fp ) ? "End" : fread_word( fp );
  fMatch = FALSE;

  switch ( UPPER(word[0]) )
  {
  case '*':
      fMatch = TRUE;
      fread_to_eol( fp );
      break;

  case 'A':
      KEY( "Abol",	ch->pcdata->abolish_timer,	fread_number( fp ) );
      KEY( "Act",   ch->act,    fread_flag( fp ) );
      KEY( "AffectedBy",  ch->affected_by,  fread_flag( fp ) );
      KEY( "AfBy",  ch->affected_by,  fread_flag( fp ) );
      KEY( "Alignment", ch->alignment,    fread_number( fp ) );
      KEY( "Alig",  ch->alignment,    fread_number( fp ) );
      
      if (!str_cmp( word, "Alia"))
      {
    if (count >= MAX_ALIAS)
    {
        fread_to_eol(fp);
        fMatch = TRUE;
        break;
    }

    ch->pcdata->alias[count]  = str_dup(fread_word(fp));
    ch->pcdata->alias_sub[count]  = str_dup(fread_word(fp));
    count++;
    fMatch = TRUE;
    break;
      }

            if (!str_cmp( word, "Alias"))
            {
                if (count >= MAX_ALIAS)
                {
                    fread_to_eol(fp);
                    fMatch = TRUE;
                    break;
                }
 
                ch->pcdata->alias[count]        = str_dup(fread_word(fp));
                ch->pcdata->alias_sub[count]    = fread_string(fp);
                count++;
                fMatch = TRUE;
                break;
            }
      

      if (!str_cmp( word, "AC") || !str_cmp(word,"Armor"))
      {
    fread_to_eol(fp);
    fMatch = TRUE;
    break;
      }

      if (!str_cmp(word,"ACs"))
      {
    int i;

    for (i = 0; i < 4; i++)
        ch->armor[i] = fread_number(fp);
    fMatch = TRUE;
    break;
      }

      if (!str_cmp(word, "AffD"))
      {
    AFFECT_DATA *paf;
    int sn;

    paf = new_affect();

    sn = skill_lookup(fread_word(fp));
    if (sn < 0)
        bug("Fread_char: unknown skill.",0);
    else
        paf->type = sn;

    paf->level  = fread_number( fp );
    paf->duration = fread_number( fp );
    paf->modifier = fread_number( fp );
    paf->location = fread_number( fp );
    paf->bitvector  = fread_number( fp );
    paf->next = ch->affected;
    ch->affected  = paf;
    fMatch = TRUE;
    break;
      }

            if (!str_cmp(word, "Affc"))
            {
                AFFECT_DATA *paf;
                int sn;
 
                paf = new_affect();
 
                sn = skill_lookup(fread_word(fp));
                if (sn < 0)
                    bug("Fread_char: unknown skill.",0);
                else
                    paf->type = sn;
 
                paf->where  = fread_number(fp);
                paf->level      = fread_number( fp );
                paf->duration   = fread_number( fp );
                paf->modifier   = fread_number( fp );
                paf->location   = fread_number( fp );
                paf->bitvector  = fread_number( fp );
                paf->next       = ch->affected;
                ch->affected    = paf;
                fMatch = TRUE;
                break;
            }

      if ( !str_cmp( word, "AttrMod"  ) || !str_cmp(word,"AMod"))
      {
    int stat;
    if(ch->version < 31)
	{
    for (stat = 0; stat < MAX_STATS - 3; stat ++)
       ch->mod_stat[stat] = fread_number(fp);
	ch->train += 10;
    fMatch = TRUE;
    break;
	}
    else
	{
    for (stat = 0; stat < MAX_STATS; stat ++)
       ch->mod_stat[stat] = fread_number(fp);
    fMatch = TRUE;
    break;
    	}
      }

      if ( !str_cmp( word, "AttrPerm" ) || !str_cmp(word,"Attr"))
      {
    int stat;

    if(ch->version < 31)
	{
    for (stat = 0; stat < MAX_STATS - 3; stat ++)
        ch->perm_stat[stat] = fread_number(fp);
    fMatch = TRUE;
    break;
    	}
    else
	{
    for (stat = 0; stat < MAX_STATS; stat++)
        ch->perm_stat[stat] = fread_number(fp);
    fMatch = TRUE;
    break;
    	}
      }
      break;

  case 'B':
      KEY( "Bnty",	ch->pcdata->bounty, fread_number( fp ) );
      KEY( "Bamfin",  ch->pcdata->bamfin, fread_string( fp ) );
      KEY( "Bamfout", ch->pcdata->bamfout,  fread_string( fp ) );
      KEY( "Bank",	ch->in_bank,	fread_number( fp ) );
      KEY( "Bin",   ch->pcdata->bamfin, fread_string( fp ) );
      KEY( "Bout",  ch->pcdata->bamfout,  fread_string( fp ) );
      break;

  case 'C':
      KEY( "Cap", ch->pcdata->capped, fread_number( fp ) );
      KEY( "Class", ch->class,    fread_number( fp ) );
      KEY( "Cla",   ch->class,    fread_number( fp ) );
      KEY( "ClaO",  ch->pcdata->old_class, fread_number( fp ) );
      KEY( "ClnF",  ch->pcdata->clan_flags, fread_flag ( fp) ); 
      if ( !str_cmp( word, "Clan" ) )
      {
        char *tmp = fread_string(fp);
        ch->clan = clan_lookup(tmp);
        free_string(tmp);

	 if (  ch->clan  == 0 )
	    ch->clan = clan_lookup("loner");

	 if (ch->clan == clan_lookup("avarice"))
            ch->pcdata->learned[skill_lookup("cure vision")] = 0;
         
	 if (ch->clan == clan_lookup("demise") 
         &&  ch->pcdata->learned[skill_lookup("confusion")] > 0 )
	 {
	   ch->pcdata->learned[skill_lookup("confusion")] = 0;
         }
         if (ch->clan == clan_lookup("demise")
         && ch->pcdata->learned[skill_lookup("aura of cthon")] > 0)
         {
           ch->pcdata->learned[skill_lookup("aura of cthon")] = 0;
         }

	 if (ch->clan == clan_lookup("zealot"))
	     ch->pcdata->learned[skill_lookup("annointment")] = 0;

         if (ch->clan == clan_lookup("honor"))
             ch->pcdata->learned[skill_lookup("honor guard")] = 0;

         if (ch->clan == clan_lookup("posse")
	 && ch->pcdata->learned[skill_lookup("cuffs of justice")] > 0)
             ch->pcdata->learned[skill_lookup("cuffs of justice")] = 0;

	 fMatch = TRUE;
	 break;
      }

      if ( !str_cmp( word, "Condition" ) || !str_cmp(word,"Cond"))
      {
    ch->pcdata->condition[0] = fread_number( fp );
    ch->pcdata->condition[1] = fread_number( fp );
    ch->pcdata->condition[2] = fread_number( fp );
    fMatch = TRUE;
    break;
      }
            if (!str_cmp(word,"Cnd"))
            {
                ch->pcdata->condition[0] = fread_number( fp );
                ch->pcdata->condition[1] = fread_number( fp );
                ch->pcdata->condition[2] = fread_number( fp );
    ch->pcdata->condition[3] = fread_number( fp );
                fMatch = TRUE;
                break;
            }
      KEY("Comm",   ch->comm,   fread_flag( fp ) ); 
      KEY("Created",   ch->pcdata->created_date,   fread_number( fp ) ); 
          
      break;

  case 'D':
      KEY( "DLevl", ch->pcdata->debit_level, fread_number( fp ) );
      KEY( "Damroll", ch->damroll,    fread_number( fp ) );
      KEY( "Dam",   ch->damroll,    fread_number( fp ) );
      KEY( "Description", ch->description,  fread_string( fp ) );
      KEY( "Desc",  ch->description,  fread_string( fp ) );
      KEY( "Disp", ch->display, fread_flag( fp ) );
      if (!str_cmp(word,"Deity"))
      {
      if(ch->version < 7)
	{
	 ch->pcdata->deity		= deity_lookup(fread_string( fp ));
         ch->pcdata->new_deity = ch->pcdata->deity;
	}
	else
	{
	 ch->pcdata->switched     = fread_number(fp);
	 ch->pcdata->deity  = deity_lookup(fread_string( fp ));
         ch->pcdata->new_deity = ch->pcdata->deity;
	}
	fMatch = TRUE;
	break;
      }
      if(!str_cmp(word, "DeityT"))
      {
	ch->pcdata->deity_timer 	= fread_number(fp);
	ch->pcdata->new_deity		= deity_lookup(fread_string(fp));
        fMatch = TRUE;
      }
      break;

  case 'E':
      if (!strcmp (word,"Edit")) {
        ch->pcdata->edit.per_flags = fread_flag (fp);
        REMOVE_BIT (ch->pcdata->edit.per_flags,EDIT_AUTO_CREATE);
        fMatch = TRUE;
      }      
      if (!str_cmp (word,"ERange")) {
        VNUM_RANGE_DATA *range;
        
        range = new_range ();
        range->min = fread_number (fp);
        range->max = fread_number (fp);
        range->next = ch->pcdata->edit.range;
        ch->pcdata->edit.range = range;        
        fMatch = TRUE;                
      }
      
  
      if ( !str_cmp( word, "End" ) )
      {
        /* adjust hp mana move up  -- here for speed's sake */
        percent = (current_time - lastlogoff) * 25 / ( 2 * 60 * 60);

    percent = UMIN(percent,100);
 
        if (percent > 0 && !IS_AFFECTED(ch,AFF_POISON)
        &&  !IS_AFFECTED(ch,AFF_PLAGUE))
        {
              ch->hit += (ch->max_hit - ch->hit) * percent / 100;
              ch->mana    += (ch->max_mana - ch->mana) * percent / 100;
              ch->move    += (ch->max_move - ch->move)* percent / 100;
        }
    return;
      }
      KEY( "Email", ch->pcdata->email, fread_string( fp ) );
      KEY( "Exp",   ch->exp,    fread_number( fp ) );
      break;

  case 'G':
      if ( !str_cmp( word, "Glad" ))
      {
         if (ch->version > 28)
	 {
	    ch->pcdata->gladiator_data[GLADIATOR_VICTORIES] = fread_number( fp );
	    ch->pcdata->gladiator_data[GLADIATOR_KILLS] = fread_number( fp );
	    ch->pcdata->gladiator_data[GLADIATOR_TEAM_VICTORIES] = fread_number( fp );
	    ch->pcdata->gladiator_data[GLADIATOR_TEAM_KILLS] = fread_number( fp );
	    ch->pcdata->gladiator_data[GLADIATOR_PLAYS] = fread_number( fp );
	    ch->pcdata->gladiator_data[GLADIATOR_TEAM_PLAYS] = fread_number( fp );
	 }
         fMatch = TRUE;
	 break;
      }
      KEY( "Gold",  ch->gold,   fread_number( fp ) );
            if ( !str_cmp( word, "Group" )  || !str_cmp(word,"Gr"))
            {
                int gn;
                char *temp;
 
                temp = fread_word( fp ) ;
                gn = group_lookup(temp);
                /* gn    = group_lookup( fread_word( fp ) ); */
                if ( gn < 0 )
                {
                    fprintf(stderr,"%s",temp);
                    bug( "Fread_char: unknown group. ", 0 );
                }
                else
        gn_add(ch,gn);
                fMatch = TRUE;
            }
      break;

  case 'H':
      KEY( "Hitroll", ch->hitroll,    fread_number( fp ) );
      KEY( "Hit",   ch->hitroll,    fread_number( fp ) );
      if( !str_cmp( word, "Hstm") )
      {
	strcpy(ch->pcdata->hostmask,fread_string(fp));
	fMatch = TRUE;
	break;
      }

      if ( !str_cmp( word, "High" ))
      {
	 ch->pcdata->highlander_data[ALL_KILLS] = fread_number( fp );
	 ch->pcdata->highlander_data[REAL_KILLS] = fread_number( fp );
         fMatch = TRUE;
	 break;
      }

      if ( !str_cmp( word, "HpManaMove" ) || !str_cmp(word,"HMV"))
      {
    ch->hit   = fread_number( fp );
    ch->max_hit = fread_number( fp );
    ch->mana  = fread_number( fp );
    ch->max_mana  = fread_number( fp );
    ch->move  = fread_number( fp );
    ch->max_move  = fread_number( fp );
    /*
        if(ch->version < 31)
	{
ch->hit = pc_race_table[ch->race].starting_hmv[0];
ch->max_hit = pc_race_table[ch->race].starting_hmv[0];
ch->mana = pc_race_table[ch->race].starting_hmv[1];
ch->max_mana = pc_race_table[ch->race].starting_hmv[1];
ch->move = pc_race_table[ch->race].starting_hmv[2];
ch->max_move = pc_race_table[ch->race].starting_hmv[2];
	}
      */

    fMatch = TRUE;
    break;
      }

        if ( !str_cmp( word, "HpManaMovePerm" ) || !str_cmp(word,"HMVP"))
        {
            ch->pcdata->perm_hit  = fread_number( fp );
            ch->pcdata->perm_mana   = fread_number( fp );
            ch->pcdata->perm_move   = fread_number( fp );
	    /*
        if(ch->version < 31)
	{
ch->pcdata->perm_hit = pc_race_table[ch->race].starting_hmv[0];
ch->pcdata->perm_mana = pc_race_table[ch->race].starting_hmv[1];
ch->pcdata->perm_move = pc_race_table[ch->race].starting_hmv[2];
	}
	*/
                fMatch = TRUE;
                break;
            }
      
      break;

  case 'I':
      KEY( "Id",    ch->id,     fread_number( fp ) );
      KEY( "Icg", ch->icg, fread_number( fp ) );
      KEY( "IcgB", ch->icg_bits, fread_flag( fp ) );
      KEY( "InvisLevel",  ch->invis_level,  fread_number( fp ) );
      KEY( "Inco",  ch->incog_level,  fread_number( fp ) );
      KEY( "Invi",  ch->invis_level,  fread_number( fp ) );
      if (!str_prefix( word, "IMC") || !str_prefix( word, "ICEL") ) 
	 {
	 fread_flag( fp ); /* advance the file pointer */
	 break;
	 }
      /* No structures exist anymore to assign these values to.
      KEY( "IMC",         ch->pcdata->imc_deaf,     fread_flag( fp ) );
      KEY( "IMCAllow",    ch->pcdata->imc_allow,    fread_flag( fp ) );
      KEY( "IMCDeny",     ch->pcdata->imc_deny,     fread_flag( fp ) );
      KEY( "ICEListen",   ch->pcdata->ice_listen, fread_string( fp ) );
       */
      break;

  case 'K':
      KEY( "Kit", ch->kit, kit_lookup(fread_string( fp ) ) );

      if (!str_cmp( word, "Kill"))
	{
          if (ch->version > 28)
          { 
	     ch->pcdata->killer_data[PC_LOWER_KILLS] = fread_number( fp );
	     ch->pcdata->killer_data[PC_EQUAL_KILLS] = fread_number( fp );
	     ch->pcdata->killer_data[PC_GREATER_KILLS] = fread_number( fp );
	     ch->pcdata->killer_data[PC_DEATHS] = fread_number( fp );
	     fMatch = TRUE;
          }
	}
      break;

  case 'L':
      KEY( "LastLevel", ch->pcdata->last_level, fread_number( fp ) );
      KEY( "LastHost", ch->pcdata->last_host, fread_string( fp ) );
      KEY( "LLev",  ch->pcdata->last_level, fread_number( fp ) );

/*
      KEY( "Level", ch->level,    fread_number( fp ) );
      KEY( "Lev",   ch->level,    fread_number( fp ) );
      KEY( "Levl",  ch->level,    fread_number( fp ) );
      */

      if (!str_cmp( word, "Levl"))
      {
	 ch->level = fread_number(fp);
         if(ch->level < 52 && ch->version < 20)
	    SET_BIT(ch->mhs,MHS_PREFRESHED);
         fMatch = TRUE;
      }

      KEY( "LogO",  lastlogoff,   fread_number( fp ) );
      KEY( "LogoutTracker", ch->pcdata->logout_tracker, fread_number( fp ) );
      KEY( "LongDescr", ch->long_descr,   fread_string( fp ) );
      KEY( "LstAtkedBy", ch->pcdata->last_attacked_by,   fread_string( fp ) );
      KEY( "LstAtkedByTimer", ch->pcdata->last_attacked_by_timer,   fread_number( fp ) );
      KEY( "LstK", ch->pcdata->last_kill,   fread_string( fp ) );
      KEY( "LstKBy", ch->pcdata->last_killed_by,   fread_string( fp ) );
      KEY( "LstCombatDate", ch->pcdata->last_combat_date, fread_number( fp ) );
      KEY( "LstDeathDate", ch->pcdata->last_death_date, fread_number( fp ) );
      KEY( "LstKillDate", ch->pcdata->last_kill_date, fread_number( fp ) );
      KEY( "LoginsWOKill", ch->pcdata->logins_without_kill,fread_number( fp ) );
      KEY( "LoginsWODeath", ch->pcdata->logins_without_death,fread_number( fp ) );
      KEY( "LoginsWOCombat", ch->pcdata->logins_without_combat,fread_number( fp ) );
      KEY( "LnD",   ch->long_descr,   fread_string( fp ) );
      break;
  case 'M':
      KEY( "Mutant", ch->pcdata->mutant_timer, fread_number( fp ) );
      KEY( "MatookT",	ch->pcdata->matookT, fread_number(fp) );
      /*
      KEY( "MHSF", ch->mhs, fread_flag( fp ) );
      */
      if (!str_cmp( word, "MHSF"))
      {
	 ch->mhs = fread_flag(fp);
	 if(ch->level < 52 && ch->version < 20)
	    SET_BIT(ch->mhs,MHS_PREFRESHED);
         if(ch->version < 28)
            REMOVE_BIT(ch->mhs,MHS_POSSE_ENEMY);
	 fMatch = TRUE;
      }

      if (!str_cmp( word, "Macro"))
      {
      
        MACRO_DATA *macro;
        
        macro = new_macro ();
        macro->name = str_dup (fread_word (fp));
        macro->text = fread_string (fp);
        macro->mark = FALSE;
        macro->next = ch->pcdata->macro;
        ch->pcdata->macro = macro;
        fMatch = TRUE;
        break;
      }         

  case 'N':
      KEY( "Name",  ch->name,   fread_string( fp ) );
      KEY( "Node",  ch->pcdata->node,	fread_number( fp ) );
      KEY( "Note",  ch->pcdata->last_note,  fread_number( fp ) );
      if (!str_cmp(word,"Not"))
      {
    ch->pcdata->last_note     = fread_number(fp);
    ch->pcdata->last_idea     = fread_number(fp);
    ch->pcdata->last_penalty    = fread_number(fp);
    ch->pcdata->last_news     = fread_number(fp);
    ch->pcdata->last_changes    = fread_number(fp);
    if(ch->version > 7)
    ch->pcdata->last_ooc    = fread_number(fp);
    else ch->pcdata->last_ooc = 0;
    if(ch->version > 13)
    ch->pcdata->last_bug	= fread_number(fp);
    else ch->pcdata->last_bug = 0;
    if(ch->version > 14)
    ch->pcdata->last_cnote	= fread_number(fp);
    else ch->pcdata->last_cnote = 0;
    if(ch->version > 16)
    ch->pcdata->last_immnote	= fread_number(fp);
    else ch->pcdata->last_immnote = 0;
    if(ch->version > 29)
    ch->pcdata->last_qnote	= fread_number(fp);
    else ch->pcdata->last_qnote = 0;

    fMatch = TRUE;
    break;
      }
      break;

  case 'O':
      if ( !str_cmp(word,"OldSk"))
      {
    int sn;
    int value;
    char *temp;

    value = fread_number( fp );
    temp = fread_word( fp ) ;
    sn = skill_lookup(temp);
    if ( sn < 0 )
    {
        fprintf(stderr,"%s",temp);
        bug( "Fread_char: unknown old skill. ", 0 );
    }
    else
    {
        ch->pcdata->old_learned[sn] = value;
    }
    fMatch = TRUE;
      }

      KEY( "Outc",	ch->pcdata->outcT, fread_number(fp) );
      break;

  case 'P':
      KEY( "Password",  ch->pcdata->pwd,  fread_string (fp) );
      KEY( "Pass",  ch->pcdata->pwd,  fread_string( fp ) );
      KEY( "Played",  ch->played,   fread_number( fp ) );
      KEY( "Plyd",  ch->played,   fread_number( fp ) );
      KEY( "Points",  ch->pcdata->points, fread_number( fp ) );
      KEY( "Pnts",  ch->pcdata->points, fread_number( fp ) );
      KEY( "Pnet",  ch->pnet, fread_flag( fp ) );
      KEY( "Position",  ch->position,   fread_number( fp ) );
      KEY( "Pos",   ch->position,   fread_number( fp ) );
      KEY( "Practice",  ch->practice,   fread_number( fp ) );
      KEY( "Prac",  ch->practice,   fread_number( fp ) );
      KEY( "Prompt",      ch->prompt,             fread_string( fp ) );
      KEY( "Prom",  ch->prompt,   fread_string( fp ) );
      break;

  case 'R':
     if ( !str_cmp( word, "Race" ) ) {
          char *tmp = fread_string(fp);
          ch->race = race_lookup(tmp);
          free_string(tmp);
          fMatch = TRUE;
          break;
     }
	/*
      KEY( "Rdid",  ch->redid,   fread_number( fp ) );
      */
      KEY( "Rank",	ch->pcdata->rank, fread_number( fp) );
      if ( !str_cmp( word, "Room" ) )
      {
    ch->in_room = get_room_index( fread_number( fp ) );
    if ( ch->in_room == NULL )
        ch->in_room = get_room_index( ROOM_VNUM_LIMBO );
    fMatch = TRUE;
    break;
      }
      KEY( "RufT",      ch->pcdata->ruffT, fread_number(fp) );

      break;

  case 'S':
      KEY( "Sac",   ch->pcdata->sac,    fread_number( fp ) );
      KEY( "Savant", ch->pcdata->savant, fread_number( fp ) );
      KEY( "SavingThrow", ch->saving_throw, fread_number( fp ) );
      KEY( "Save",  ch->saving_throw, fread_number( fp ) );
      if ( !str_cmp( word, "SaveClan" ) )
      {
	 ch->pcdata->save_clan = clan_lookup(fread_string(fp));  
	 fMatch = TRUE;
	 break;
      }

      KEY( "Scro",  ch->lines,    fread_number( fp ) );
      KEY( "SecDam",ch->pcdata->second_damroll,    fread_number( fp ) );
      KEY( "SecHit",ch->pcdata->second_hitroll,    fread_number( fp ) );
      KEY( "Sex",   ch->sex,    fread_number( fp ) );

      if ( !str_cmp( word, "Shift" ))
      {
         ch->save_race = fread_number( fp );
         ch->save_con_mod = fread_number( fp );
	 ch->save_stat[STAT_STR] = fread_number( fp );
	 ch->save_stat[STAT_INT] = fread_number( fp );
	 ch->save_stat[STAT_WIS] = fread_number( fp );
	 ch->save_stat[STAT_DEX] = fread_number( fp );
	 ch->save_stat[STAT_CON] = fread_number( fp );
         ch->save_stat[STAT_AGT] = fread_number( fp );
         ch->save_stat[STAT_END] = fread_number( fp );
         ch->save_stat[STAT_SOC] = fread_number( fp );
	 ch->mod_stat[STAT_CON] -= ch->save_con_mod;

         fMatch = TRUE;
         break;
      }

      KEY( "ShortDescr",  ch->short_descr,  fread_string( fp ) );
      KEY( "ShD",   ch->short_descr,  fread_string( fp ) );
      KEY( "Silv",        ch->silver,             fread_number( fp ) );
      KEY( "SkPTimer", ch->pcdata->skill_point_timer, fread_number( fp ) );
      KEY( "SkPTracker", ch->pcdata->skill_point_tracker, fread_number( fp ) );
      KEY( "Spz", ch->pcdata->specialize, skill_lookup(fread_word( fp ) ) );
      KEY( "SpecEn", ch->species_enemy, fread_number( fp ) );
      KEY( "SurN", ch->pcdata->surname, fread_string( fp ) );
      if (!str_cmp( word, "Steal"))
	{
          if (ch->version > 28)
          {
	     ch->pcdata->steal_data[PC_STOLEN_ITEMS] = fread_number( fp );
	     ch->pcdata->steal_data[PC_STOLEN_GOLD] = fread_number( fp );
	     ch->pcdata->steal_data[PC_SLICES] = fread_number( fp );
	     fMatch = TRUE;
          }
	}

      if ( !str_cmp( word, "SkiP" ))
      {
	 if (ch->version < 19)
	    ch->skill_points = 0;
	 else
	    ch->skill_points = fread_number( fp );
	 fMatch = TRUE;
      }

      if ( !str_cmp( word, "Skill" ) || !str_cmp(word,"Sk"))
      {
    int sn;
    int value;
    char *temp;

    value = fread_number( fp );
    temp = fread_word( fp ) ;
    sn = skill_lookup(temp);
    /* sn    = skill_lookup( fread_word( fp ) ); */
    if ( sn < 0 )
    {
        fprintf(stderr,"%s",temp);
        bug( "Fread_char: unknown skill. ", 0 );
    }
    else
    {
        ch->pcdata->learned[sn] = value;
	ch->pcdata->last_learned[sn] = value;
    }
    fMatch = TRUE;
      }

      break;

  case 'T':
            KEY( "TrueSex",     ch->pcdata->true_sex,   fread_number( fp ) );
      KEY( "TSex",  ch->pcdata->true_sex,   fread_number( fp ) );
      KEY( "Trai",  ch->train,   fread_number( fp ) );
      KEY( "Trust", ch->trust,    fread_number( fp ) );
      KEY( "Tru",   ch->trust,    fread_number( fp ) );

      if ( !str_cmp( word, "Title" )  || !str_cmp( word, "Titl"))
      {
    ch->pcdata->title = fread_string( fp );
        if (ch->pcdata->title[0] != '.' && ch->pcdata->title[0] != ',' 
    &&  ch->pcdata->title[0] != '!' && ch->pcdata->title[0] != '?')
    {
        sprintf( buf, " %s", ch->pcdata->title );
        free_string( ch->pcdata->title );
        ch->pcdata->title = str_dup( buf );
    }
    fMatch = TRUE;
    break;
      }

      break;

  case 'V':
      KEY( "Version",     ch->version,    fread_number ( fp ) );
      KEY( "Vump",     ch->trumps,    fread_number ( fp ) );
      KEY( "Vers",  ch->version,    fread_number ( fp ) );
      if ( !str_cmp( word, "Vnum" ) )
      {
    ch->pIndexData = get_mob_index( fread_number( fp ) );
    fMatch = TRUE;
    break;
      }
      break;

  case 'W':
      KEY( "Wimpy", ch->wimpy,    fread_number( fp ) );
      KEY( "Wimp", ch->wimpy,    fread_number( fp ) );
      KEY( "Wizn",  ch->wiznet,   fread_flag( fp ) );
      KEY( "WhoName", ch->pcdata->who_name, fread_string( fp ) );
      break;
  }

  if ( !fMatch )
  {
      sprintf(log_buf,"Fread_char: no match for %s.", word );
      bug( log_buf, 0 );
      fread_to_eol( fp );
  }
    }
  if(ch->version < 31)
  {
    ch->train += 10;
    if(ch->wimpy > 50) ch->wimpy = 50;
  }
}

/* load a pet from the forgotten reaches */
void fread_pet( CHAR_DATA *ch, FILE *fp )
{
    char *word;
    CHAR_DATA *pet;
    bool fMatch;
    int lastlogoff = current_time;
    int percent;

    /* first entry had BETTER be the vnum or we barf */
    word = feof(fp) ? "END" : fread_word(fp);
    if (!str_cmp(word,"Vnum"))
    {
      int vnum;
      
      vnum = fread_number(fp);
      if (get_mob_index(vnum) == NULL)
  {
          bug("Fread_pet: bad vnum %d.",vnum);
      pet = create_mobile(get_mob_index(MOB_VNUM_FIDO));
  }
      else
          pet = create_mobile(get_mob_index(vnum));
    }
    else
    {
        bug("Fread_pet: no vnum in file.",0);
        pet = create_mobile(get_mob_index(MOB_VNUM_FIDO));
    }
    
    for ( ; ; )
    {
      word  = feof(fp) ? "END" : fread_word(fp);
      fMatch = FALSE;
      
      switch (UPPER(word[0]))
      {
      case '*':
          fMatch = TRUE;
          fread_to_eol(fp);
          break;
        
      case 'A':
          KEY( "Act",   pet->act,   fread_flag(fp));
          KEY( "AfBy",  pet->affected_by, fread_flag(fp));
          KEY( "Alig",  pet->alignment,   fread_number(fp));
          
          if (!str_cmp(word,"ACs"))
          {
            int i;
            
            for (i = 0; i < 4; i++)
                pet->armor[i] = fread_number(fp);
            fMatch = TRUE;
            break;
          }
          
          if (!str_cmp(word,"AffD"))
          {
            AFFECT_DATA *paf;
            int sn;
            
            paf = new_affect();
            
            sn = skill_lookup(fread_word(fp));
            if (sn < 0)
                bug("Fread_char: unknown skill.",0);
            else
               paf->type = sn;
               
            paf->level  = fread_number(fp);
            paf->duration = fread_number(fp);
            paf->modifier = fread_number(fp);
            paf->location = fread_number(fp);
            paf->bitvector  = fread_number(fp);
            paf->next = pet->affected;
            pet->affected = paf;
            fMatch    = TRUE;
            break;
          }

            if (!str_cmp(word,"Affc"))
            {
                AFFECT_DATA *paf;
                int sn;
 
                paf = new_affect();
 
                sn = skill_lookup(fread_word(fp));
                if (sn < 0)
                    bug("Fread_char: unknown skill.",0);
                else
                   paf->type = sn;
 
    paf->where  = fread_number(fp);
                paf->level      = fread_number(fp);
                paf->duration   = fread_number(fp);
                paf->modifier   = fread_number(fp);
                paf->location   = fread_number(fp);
                paf->bitvector  = fread_number(fp);
                paf->next       = pet->affected;
                pet->affected   = paf;
                fMatch          = TRUE;
                break;
            }
           
          if (!str_cmp(word,"AMod"))
          {
            int stat;
            
              if(ch->version < 31)
		{
               for (stat = 0; stat < MAX_STATS-3; stat++)
                   pet->mod_stat[stat] = fread_number(fp);
               fMatch = TRUE;
               break;
		}
	      else
		 {
            for (stat = 0; stat < MAX_STATS; stat++)
                pet->mod_stat[stat] = fread_number(fp);
            fMatch = TRUE;
            break;
		}
          }
           
          if (!str_cmp(word,"Attr"))
          {
               int stat;
              if(ch->version < 31)
		{
               for (stat = 0; stat < MAX_STATS-3; stat++)
                   pet->perm_stat[stat] = fread_number(fp);
               fMatch = TRUE;
               break;
		}
	      else
		 {
               for (stat = 0; stat < MAX_STATS; stat++)
                   pet->perm_stat[stat] = fread_number(fp);
               fMatch = TRUE;
               break;
		 }
          }
          break;
           
       case 'C':
           KEY( "Comm", pet->comm,    fread_flag(fp));
           break;
           
       case 'D':
           KEY( "Dam",  pet->damroll,   fread_number(fp));
           KEY( "Desc", pet->description, fread_string(fp));
           break;
           
       case 'E':
           if (!str_cmp(word,"End"))
       {
    pet->leader = ch;
    pet->master = ch;
    ch->pet = pet;
        /* adjust hp mana move up  -- here for speed's sake */
        percent = (current_time - lastlogoff) * 25 / ( 2 * 60 * 60);
 
        if (percent > 0 && !IS_AFFECTED(ch,AFF_POISON)
        &&  !IS_AFFECTED(ch,AFF_PLAGUE))
        {
        percent = UMIN(percent,100);
            pet->hit  += (pet->max_hit - pet->hit) * percent / 100;
              pet->mana   += (pet->max_mana - pet->mana) * percent / 100;
              pet->move   += (pet->max_move - pet->move)* percent / 100;
        }
            return;
       }
           KEY( "Exp",  pet->exp,   fread_number(fp));
           break;
           
       case 'G':
           KEY( "Gold", pet->gold,    fread_number(fp));
           break;
           
       case 'H':
           KEY( "Hit",  pet->hitroll,   fread_number(fp));
           
           if (!str_cmp(word,"HMV"))
           {
            pet->hit  = fread_number(fp);
            pet->max_hit  = fread_number(fp);
            pet->mana = fread_number(fp);
            pet->max_mana = fread_number(fp);
            pet->move = fread_number(fp);
            pet->max_move = fread_number(fp);
            fMatch = TRUE;
            break;
           }
           break;
           
      case 'L':
           KEY( "Levl", pet->level,   fread_number(fp));
           KEY( "LnD",  pet->long_descr,  fread_string(fp));
       KEY( "LogO", lastlogoff,   fread_number(fp));
           break;
           
      case 'N':
           KEY( "Name", pet->name,    fread_string(fp));
           break;
           
      case 'P':
           KEY( "Pos",  pet->position,    fread_number(fp));
           break;
           
  case 'R':
     if ( !str_cmp( word, "Race" ) ) {
          char *tmp = fread_string(fp);
          ch->race = race_lookup(tmp);
          free_string(tmp);
          fMatch = TRUE;
          break;
     }
      
      case 'S' :
          KEY( "Save",  pet->saving_throw,  fread_number(fp));
          KEY( "Sex",   pet->sex,   fread_number(fp));
          KEY( "ShD",   pet->short_descr, fread_string(fp));
            KEY( "Silv",        pet->silver,            fread_number( fp ) );
          break;
          
      if ( !fMatch )
      {
          bug("Fread_pet: no match.",0);
          fread_to_eol(fp);
      }
      
      }
    }
}



void fread_obj( CHAR_DATA *ch, FILE *fp )
{
    OBJ_DATA *obj;
    char *word;
    int iNest, nEnch;
    bool fMatch;
    bool fNest;
    bool fVnum;
    bool first;
    bool new_format;  /* to prevent errors */
    bool make_new;    /* update object */
    
    fVnum = FALSE;
    obj = NULL;
    first = TRUE;  /* used to counter fp offset */
    new_format = FALSE;
    make_new = FALSE;

    word   = feof( fp ) ? "End" : fread_word( fp );
    if (!str_cmp(word,"Vnum" ))
    {
        int vnum;
  first = FALSE;  /* fp will be in right place */
 
        vnum = fread_number( fp );
        if (  get_obj_index( vnum )  == NULL )
  {
            bug( "Fread_obj: bad vnum %d.", vnum );
  }
        else
  {
      obj = create_object(get_obj_index(vnum),-1,FALSE);
      new_format = TRUE;
  }
      
    }

    if (obj == NULL)  /* either not found or old style */
    {
      obj = new_obj();
      obj->name   = str_dup( "" );
      obj->short_descr  = str_dup( "" );
      obj->description  = str_dup( "" );
      obj->stolen_timer = 0;
    }

    fNest   = FALSE;
    fVnum   = TRUE;
    iNest   = 0;

    for ( ; ; )
    {
  if (first)
      first = FALSE;
  else
      word   = feof( fp ) ? "End" : fread_word( fp );
  fMatch = FALSE;

  switch ( UPPER(word[0]) )
  {
  case '*':
      fMatch = TRUE;
      fread_to_eol( fp );
      break;

  case 'A':

      if (!str_cmp(word,"AffD"))
      {

    AFFECT_DATA *paf;
    int sn;

    paf = new_affect();

    sn = skill_lookup(fread_word(fp));
    if (sn < 0)
        bug("Fread_obj: unknown skill.",0);
    else
        paf->type = sn;

    paf->level  = fread_number( fp );
    paf->duration = fread_number( fp );
    paf->modifier = fread_number( fp );
    paf->location = fread_number( fp );
    paf->bitvector  = fread_number( fp );
    paf->next = obj->affected;
    obj->affected = paf;
    fMatch    = TRUE;
    break;
      }
            if (!str_cmp(word,"Affc"))
            {
                AFFECT_DATA *paf;
                int sn;
 
                paf = new_affect();
 
                sn = skill_lookup(fread_word(fp));
                if (sn < 0)
                    bug("Fread_obj: unknown skill.",0);
                else
                    paf->type = sn;
                
/*		if(!IS_SET(ch->mhs, MHS_PREFRESHED) ||
		  sn != skill_lookup("enchant weapon")) 
                 {
*/

                paf->where  = fread_number( fp );
                paf->level      = fread_number( fp );
                paf->duration   = fread_number( fp );

		if(!IS_SET(ch->mhs, MHS_PREFRESHED) ||
		  sn != skill_lookup("enchant weapon")) 
                {
                   paf->modifier   = fread_number( fp );
		}
		else
		{
                   nEnch         = fread_number ( fp );
		   nEnch = UMIN(nEnch/2, 8);
		   paf->modifier = nEnch;
		}

                paf->location   = fread_number( fp );
                paf->bitvector  = fread_number( fp );
                paf->next       = obj->affected;
                obj->affected   = paf;
                fMatch          = TRUE;
                break;
/*
                }
		else 
		{
		paf->where = fread_number (fp);
		paf->level = fread_number (fp);
		paf->duration = fread_number (fp);


                nEnch         = fread_number (fp);

		nEnch = UMIN(nEnch/2, 8);
		paf->modifier = nEnch;
		
		paf->location = fread_number (fp);
		paf->bitvector = fread_number (fp);
		paf->next      = paf;
		obj->affected = paf;
		fMatch = TRUE;
		break;
		}
*/
	    }
      break;

  case 'C':
  if (!IS_SET(ch->mhs, MHS_PREFRESHED))
  {
      KEY( "Cond",  obj->condition,   fread_number( fp ) );
      KEY( "Cost",  obj->cost,    fread_number( fp ) );
  }    
      break;
  
  case 'D':
      KEY( "Description", obj->description, fread_string( fp ) );
      KEY( "Desc",  obj->description, fread_string( fp ) );
      break;

  case 'E':

      if ( !str_cmp( word, "Enchanted"))
      {
    obj->enchanted = TRUE;
    fMatch  = TRUE;
    break;
      }
    
    if (!IS_SET(ch->mhs, MHS_PREFRESHED))
    {
      KEY( "ExtraFlags",  obj->extra_flags, fread_number( fp ) );
      KEY( "ExtF",  obj->extra_flags, fread_number( fp ) );
    }

      if ( !str_cmp( word, "ExtraDescr" ) || !str_cmp(word,"ExDe"))
      {
    EXTRA_DESCR_DATA *ed;

    ed = new_extra_descr();

    ed->keyword   = fread_string( fp );
    ed->description   = fread_string( fp );
    ed->next    = obj->extra_descr;
    obj->extra_descr  = ed;
    fMatch = TRUE;
      }

      if ( !str_cmp( word, "End" ) )
      {
    if ( !fNest || !fVnum || obj->pIndexData == NULL)
    {
        bug( "Fread_obj: incomplete object.", 0 );
        free_obj(obj);
        return;
    }
    else
    {
        if (!new_format)
        {
          obj->next = object_list;
          object_list = obj;
          obj->pIndexData->count++;
        }

        if (!obj->pIndexData->new_format 
        && obj->item_type == ITEM_ARMOR
        &&  obj->value[1] == 0)
        {
      obj->value[1] = obj->value[0];
      obj->value[2] = obj->value[0];
        }
        if (make_new)
        {
      int wear;
      
      wear = obj->wear_loc;
      extract_obj(obj);

      obj = create_object(obj->pIndexData,0,FALSE);
      obj->wear_loc = wear;
        }
        if ( iNest == 0 || rgObjNest[iNest] == NULL )
      obj_to_char( obj, ch );
        else
      obj_to_obj( obj, rgObjNest[iNest-1] );
        return;
    }
      }
      break;

  case 'I':
      KEY( "ItemType",  obj->item_type,   fread_number( fp ) );
      KEY( "Ityp",  obj->item_type,   fread_number( fp ) );
      break;

  case 'L':

   if (!IS_SET(ch->mhs, MHS_PREFRESHED))
   {
      KEY( "Level", obj->level,   fread_number( fp ) );
      KEY( "Lev",   obj->level,   fread_number( fp ) );
   } 
      break;

  case 'N':
      KEY( "Name",  obj->name,    fread_string( fp ) );

      if ( !str_cmp( word, "Nest" ) )
      {
    iNest = fread_number( fp );
    if ( iNest < 0 || iNest >= MAX_NEST )
    {
        bug( "Fread_obj: bad nest %d.", iNest );
    }
    else
    {
        rgObjNest[iNest] = obj;
        fNest = TRUE;
    }
    fMatch = TRUE;
      }
      break;

    case 'O':
      if ( !str_cmp( word,"Oldstyle" ) )
      {
    if (obj->pIndexData != NULL && obj->pIndexData->new_format)
        make_new = TRUE;
    fMatch = TRUE;
      }
      break;
    
    case 'P':
      KEY( "PrevOwner", obj->prev_owner, fread_string(fp) );
      break;

  case 'S':
      KEY( "ShortDescr",  obj->short_descr, fread_string( fp ) );
      KEY( "ShD",   obj->short_descr, fread_string( fp ) );
      KEY( "Stolen",  obj->stolen_timer,   fread_number( fp ) );

      if ( !str_cmp( word, "Spell" ) )
      {
    int iValue;
    int sn;

    iValue = fread_number( fp );
    sn     = skill_lookup( fread_word( fp ) );
    if ( iValue < 0 || iValue > 3 )
    {
        bug( "Fread_obj: bad iValue %d.", iValue );
    }
    else if ( sn < 0 )
    {
        bug( "Fread_obj: unknown skill.", 0 );
    }
    else
    {
        obj->value[iValue] = sn;
    }
    fMatch = TRUE;
    break;
      }

      break;

  case 'T':
      KEY( "Timer", obj->timer,   fread_number( fp ) );
      KEY( "Time",  obj->timer,   fread_number( fp ) );
      break;

  case 'V':
      if ( (!str_cmp( word, "Values" ) || !str_cmp(word,"Vals")))
      {
	if    (!IS_SET(ch->mhs, MHS_PREFRESHED))
      {
    obj->value[0] = fread_number( fp );
    obj->value[1] = fread_number( fp );
    obj->value[2] = fread_number( fp );
    obj->value[3] = fread_number( fp );
    if (obj->item_type == ITEM_WEAPON && obj->value[0] == 0)
       obj->value[0] = obj->pIndexData->value[0];
      }
    fMatch    = TRUE;
    break;
      }

      if ( !str_cmp( word, "Val") )  
      {
      if (!IS_SET(ch->mhs, MHS_PREFRESHED))
      {
    obj->value[0]   = fread_number( fp );
    obj->value[1] = fread_number( fp );
    obj->value[2]   = fread_number( fp );
    obj->value[3] = fread_number( fp );
    obj->value[4] = fread_number( fp );
      }
   fMatch = TRUE;
    break;
      }

      if ( !str_cmp( word, "Vnum" ) )
      {
    int vnum;

    vnum = fread_number( fp );
    if ( ( obj->pIndexData = get_obj_index( vnum ) ) == NULL )
        bug( "Fread_obj: bad vnum %d.", vnum );
    else
        fVnum = TRUE;
    fMatch = TRUE;
    break;
      }
      break;

  case 'W':
  if (!IS_SET(ch->mhs, MHS_PREFRESHED))
  {
      KEY( "Wrp", obj->warps, fread_number( fp ) );
      KEY( "WearFlags", obj->wear_flags,  fread_number( fp ) );
      KEY( "WeaF",  obj->wear_flags,  fread_number( fp ) );
      KEY( "WearLoc", obj->wear_loc,    fread_number( fp ) );
      KEY( "Wear",  obj->wear_loc,    fread_number( fp ) );
      KEY( "WearTime",  obj->wear_timer,    fread_number( fp ) );
      KEY( "Weight",  obj->weight,    fread_number( fp ) );
      KEY( "Wt",    obj->weight,    fread_number( fp ) );
      break;
  }
  }

  if ( !fMatch )
  {
      bug( "Fread_obj: no match.", 0 );
      fread_to_eol( fp );
  }
    }
}
@


1.186
log
@adding the restrain spell to the infuse ability
corye
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.185 2003/06/03 02:57:28 boogums Exp $";
d1244 1
a1244 1
            ch->pcdata->learned[skill_lookup("cure vision")] = 1;
d1258 1
a1258 1
	     ch->pcdata->learned[skill_lookup("annointment")] = 1;
d1261 1
a1261 1
             ch->pcdata->learned[skill_lookup("honor guard")] = 1;
@


1.185
log
@taking confusion out of demises setup as well as aura of cthon
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.184 2002/11/16 22:52:51 boogums Exp $";
d1263 3
a1265 2
         if (ch->clan == clan_lookup("posse"))
             ch->pcdata->learned[skill_lookup("cuffs of justice")] = 1;
@


1.184
log
@making it so demise actually GETS their skill and tweaked the flee
chance
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.183 2002/11/12 03:05:00 boogums Exp $";
d1246 10
a1255 4
	 if (ch->clan == clan_lookup("demise"))
	     ch->pcdata->learned[skill_lookup("confusion")] = 1;
         if (ch->clan == clan_lookup("demise"))
             ch->pcdata->learned[skill_lookup("aura of cthon")] = 1;
@


1.183
log
@adding the perk to the abolish ability
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.182 2002/11/10 19:10:53 boogums Exp $";
d1248 2
@


1.182
log
@should fix the save while shapeshifted bug
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.181 2002/06/22 17:31:04 mud Exp $";
d281 3
a283 2
       fprintf(fp,"Shift %d %d %d %d %d %d %d %d %d %d~\n",
	  ch->save_race,ch->save_con_mod,
@


1.181
log
@Undoing Prompt string change
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.180 2002/06/22 17:28:57 mud Exp $";
d281 1
a281 1
       fprintf(fp,"Shift %d %d %d %d %d %d %d~\n",
d287 4
a290 1
	  ch->save_stat[STAT_CON]);
d1672 3
@


1.180
log
@Trying to unfry save.c
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.179 2002/06/20 15:55:00 rusty Exp $";
d1616 1
a1616 5
      if( !str_cmp( word, "Prom") ) {
	  free_string(ch->prompt);
	  strcpy(ch->prompt,fread_string(fp));
          fMatch = TRUE;
	  }
@


1.179
log
@Some bug fixes from off the net.
new_note() used for loading the note spools.
@
text
@d3 1
a3 1
 *  Michael Seifert, Hans Henrik St{rfeldt, Tom Madsen, and Katja Nyboe.   *
d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.178 2002/05/22 18:00:41 rusty Exp $";
@


1.178
log
@All gems end up in corpses.
All items stolen within the last 10*number_fuzzy(5) ticks go into corpses.
Items taken by steal, loot, heat metal and disarm get timers
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.177 2002/04/30 15:22:33 rusty Exp $";
a1253 2


d1616 5
a1620 1
      KEY( "Prom",  ch->prompt,   fread_string( fp ) );
a1623 1
      /* KEY( "Race",        ch->race, race_lookup(fread_string( fp )) ); */
d2001 5
a2005 1
          KEY( "Race",  pet->race, race_lookup(fread_string(fp)));
d2007 1
@


1.177
log
@old stat count for Amod in fread_pet updated like Attr
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.176 2002/04/11 03:17:39 boogums Exp $";
d672 2
d2065 1
d2311 1
@


1.176
log
@adding posse skill cuffs of justice
corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.175 2002/04/01 21:14:08 rusty Exp $";
d1896 9
d1909 1
@


1.175
log
@It's a flag not a number Dumbass!
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.174 2002/04/01 21:05:45 rusty Exp $";
d1248 4
@


1.174
log
@Added pnet, wiznet like info for mortals
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.173 2002/03/12 17:16:27 mud Exp $";
d1606 1
a1606 1
      KEY( "Pnet",  ch->pnet, fread_number( fp ) );
@


1.173
log
@Add trains instead of overwrite
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.172 2002/03/12 03:34:41 mud Exp $";
d375 2
d1606 1
@


1.172
log
@10 free trains for old chars for new stats
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.171 2002/03/12 03:01:07 rusty Exp $";
d1177 1
a1177 1
	ch->train =+ 10;
@


1.171
log
@Yanked starting HMV as fixed values and put back in gains
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.170 2002/03/11 06:57:53 mud Exp $";
d1177 1
@


1.170
log
@Missed ,
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.169 2002/03/11 06:57:19 mud Exp $";
d1403 1
d1413 1
d1424 1
d1431 1
@


1.169
log
@Try to stop crashes
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.168 2002/03/11 06:24:39 rusty Exp $";
d1720 1
a1720 1
      KEY( "Trai",  ch->train   fread_number( fp ) );
@


1.168
log
@Few stupidly missed updates
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.167 2002/03/11 02:34:24 rusty Exp $";
d1720 1
a1720 6
      if ( !str_cmp( word, "Trai" ) )
      {
	ch->train += fread_number( fp );
        fMatch = TRUE;
	break;
      }
d1754 1
a1754 11
          if (!str_cmp(word,"Wimp"))
          {
              if(ch->version < 31)
		{
		  ch->wimpy = 20;
		  fread_number(fp);
		}
	    ch->wimpy = fread_number(fp);
            fMatch = TRUE;
	    break;
	  }
d1767 5
a1896 1
		ch->train += 10;
@


1.167
log
@10 free trains for new stats
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.166 2002/03/09 20:12:57 mud Exp $";
d1722 3
a1724 5
	ch->train = fread_number( fp );
	if(ch->version < 31)
	{
	  ch->train += 10;
	}
d1759 11
a1769 1
      KEY( "Wimp",  ch->wimpy,    fread_number( fp ) );
d1907 1
@


1.166
log
@HMV set at login now
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.165 2002/03/09 19:14:29 rusty Exp $";
d1720 8
a1727 1
      KEY( "Trai",  ch->train,    fread_number( fp ) );
@


1.165
log
@Hiding information and reup_affect() additions. Initial
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.164 2002/02/22 16:32:56 poquah Exp $";
d1403 10
d1417 11
a1427 5
            if ( !str_cmp( word, "HpManaMovePerm" ) || !str_cmp(word,"HMVP"))
            {
                ch->pcdata->perm_hit  = fread_number( fp );
                ch->pcdata->perm_mana   = fread_number( fp );
                ch->pcdata->perm_move   = fread_number( fp );
@


1.164
log
@adding new quest note spool
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.163 2002/01/22 21:05:09 rage Exp $";
d226 1
a226 1
    fprintf( fp, "Vers %d\n",   30   );
d233 1
a233 1
    if (ch->prompt != NULL || !str_cmp(ch->prompt,"<%hhp %mm %vmv> "))
d402 1
a402 1
    fprintf( fp, "Attr %d %d %d %d %d\n",
d407 4
a410 1
  ch->perm_stat[STAT_CON] );
d412 1
a412 1
    fprintf (fp, "AMod %d %d %d %d %d\n",
d417 4
a420 1
  ch->mod_stat[STAT_CON] );  
d577 1
a577 1
    fprintf(fp, "Attr %d %d %d %d %d\n",
d580 3
a582 2
      pet->perm_stat[STAT_CON]);
    fprintf(fp, "AMod %d %d %d %d %d\n",
d585 2
a586 1
      pet->mod_stat[STAT_CON]);
d848 2
a849 2
    ch->display		= DISP_COMBINE | DISP_PROMPT;
    ch->prompt        = str_dup("<%hhp %mm %vmv> ");
d1173 9
d1186 1
d1193 9
d1206 1
d1872 9
a1880 1
               
d1885 1
@


1.163
log
@another bug with deity being set to mojo on update
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.162 2002/01/22 20:33:29 rage Exp $";
d226 1
a226 1
    fprintf( fp, "Vers %d\n",   29   );
d329 1
a329 1
    fprintf( fp, "Not  %ld %ld %ld %ld %ld %ld %ld %ld %ld\n",    
d332 2
a333 1
  ch->pcdata->last_bug, ch->pcdata->last_cnote , ch->pcdata->last_immnote);
d1514 3
@


1.162
log
@Fixed bug causing everyone's deity to be set to Mojo on the tick
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.161 2002/01/22 20:24:27 rage Exp $";
d1256 1
d1262 1
@


1.161
log
@I think I got the deity switch bug licked
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.160 2002/01/22 20:13:23 rage Exp $";
d1267 1
a1268 1
	ch->pcdata->deity_timer 	= fread_number(fp);
@


1.160
log
@another bug fix in switching deities
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.159 2002/01/20 21:09:08 rage Exp $";
d1269 1
@


1.159
log
@changed sequence of events for switching deities
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.158 2001/12/05 17:07:05 poquah Exp $";
d291 1
a291 1
	fprintf(fp, "DeityT %d\n", ch->pcdata->deity_timer);
a1250 1
      KEY( "DeityT", ch->pcdata->deity_timer, fread_number(fp) );
d1264 5
@


1.158
log
@move gladiator_data and highlander_data to pcdata
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.157 2001/12/05 16:39:02 poquah Exp $";
d290 2
d1251 1
@


1.157
log
@new kr stats
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.156 2001/12/03 18:34:55 poquah Exp $";
d278 2
a279 2
       fprintf(fp,"High %d %d\n",ch->highlander_data[ALL_KILLS],
          ch->highlander_data[REAL_KILLS]);
d296 7
a302 4
    fprintf( fp, "Glad %d %d %d %d %d %d\n", ch->gladiator_data[GLADIATOR_VICTORIES],
       ch->gladiator_data[GLADIATOR_KILLS],ch->gladiator_data[GLADIATOR_TEAM_VICTORIES],
       ch->gladiator_data[GLADIATOR_TEAM_KILLS],ch->gladiator_data[GLADIATOR_PLAYS],
       ch->gladiator_data[GLADIATOR_TEAM_PLAYS]);
d821 8
a828 8
    ch->highlander_data[0] = 0;
    ch->highlander_data[1] = 0;
    ch->gladiator_data[0] = 0;
    ch->gladiator_data[1] = 0;
    ch->gladiator_data[2] = 0;
    ch->gladiator_data[3] = 0;
    ch->gladiator_data[4] = 0;
    ch->gladiator_data[5] = 0;
d1306 1
a1306 1
         if (ch->version > 26)
d1308 6
a1313 6
	    ch->gladiator_data[GLADIATOR_VICTORIES] = fread_number( fp );
	    ch->gladiator_data[GLADIATOR_KILLS] = fread_number( fp );
	    ch->gladiator_data[GLADIATOR_TEAM_VICTORIES] = fread_number( fp );
	    ch->gladiator_data[GLADIATOR_TEAM_KILLS] = fread_number( fp );
	    ch->gladiator_data[GLADIATOR_PLAYS] = fread_number( fp );
	    ch->gladiator_data[GLADIATOR_TEAM_PLAYS] = fread_number( fp );
d1350 2
a1351 2
	 ch->highlander_data[ALL_KILLS] = fread_number( fp );
	 ch->highlander_data[REAL_KILLS] = fread_number( fp );
@


1.156
log
@add some code to look for storage chars
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.155 2001/12/01 23:16:57 poquah Exp $";
d226 1
a226 1
    fprintf( fp, "Vers %d\n",   28   );
d253 9
a261 7
    fprintf( fp, "Kill %d %d %d\n",ch->killer_data[PC_KILLS],
		ch->killer_data[PC_DEATHS],ch->killer_data[PC_ATTACKS]);  
    fprintf( fp, "Steal %ld %ld %ld %ld\n",
		ch->steal_data[PC_STOLEN_ITEMS],
		ch->steal_data[PC_STOLEN_GOLD],
		ch->steal_data[PC_STOLEN_SILVER],
		ch->steal_data[PC_SLICES]);
d811 7
a817 7
    ch->killer_data[0] = 0;
    ch->killer_data[1] = 0;
    ch->killer_data[2] = 0;
    ch->steal_data[0] = 0;
    ch->steal_data[1] = 0;
    ch->steal_data[2] = 0;
    ch->steal_data[3] = 0;
d1401 8
a1408 12
	  ch->killer_data[PC_KILLS] = fread_number( fp );
	  ch->killer_data[PC_DEATHS] = fread_number( fp );
	  ch->killer_data[PC_ATTACKS] = fread_number( fp );

          if (ch->version == 21)
	  {
	     ch->steal_data[PC_STOLEN_ITEMS] += fread_number( fp );
	     ch->steal_data[PC_STOLEN_GOLD] += fread_number( fp );
	     ch->steal_data[PC_STOLEN_SILVER] += fread_number( fp );
	     ch->steal_data[PC_SLICES] += fread_number( fp );
	  }
	  fMatch = TRUE;
d1613 7
a1619 5
	  ch->steal_data[PC_STOLEN_ITEMS] = fread_number( fp );
	  ch->steal_data[PC_STOLEN_GOLD] = fread_number( fp );
	  ch->steal_data[PC_STOLEN_SILVER] = fread_number( fp );
	  ch->steal_data[PC_SLICES] = fread_number( fp );
	  fMatch = TRUE;
@


1.155
log
@working on death code bugs and new tracking fields
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.154 2001/11/25 01:34:46 mud Exp $";
d264 6
d785 6
d792 2
d1440 6
@


1.154
log
@bug() # of vars passed
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.153 2001/11/25 01:26:39 rusty Exp $";
d778 1
@


1.153
log
@Webpage crash/bug fixes applied
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.152 2001/10/17 03:02:48 boogums Exp $";
d151 1
a151 1
     bug("save_char_obj: Trying to save an invalidated character.\n");
@


1.152
log
@adding in the honor guard honor clan spell
-Corey
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.151 2001/08/30 01:03:24 guerrand Exp $";
d149 6
d1176 5
a1180 1
	 if ( ( ch->clan = clan_lookup(fread_string(fp))) == 0 )
d1523 1
a1523 1
            KEY( "Prompt",      ch->prompt,             fread_string( fp ) );
d1528 8
a1535 2
      KEY( "Race",        ch->race, 
        race_lookup(fread_string( fp )) );
@


1.151
log
@Added bounty command.
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.150 2001/07/30 20:52:01 poquah Exp $";
d1181 4
@


1.150
log
@Remove all old posse enemies
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.149 2001/06/15 02:27:51 guerrand Exp $";
d258 1
d1154 1
@


1.149
log
@PAladin abolish disease ability.  Neat!
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.148 2001/06/09 17:42:41 guerrand Exp $";
d220 1
a220 1
    fprintf( fp, "Vers %d\n",   27   );
d1422 2
@


1.148
log
@GMAN
Adde surnames, saving/reading functionality, ability for IMMs to set them, and
they show up in score only right noGMAN
Adde surnames, saving/reading functionality, ability for IMMs to set them, and
they show up in score only right noww
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.147 2001/05/27 19:56:05 rusty Exp $";
d237 2
d1026 1
@


1.147
log
@Added Zealot clan skill "annointment"
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.146 2001/05/24 01:34:57 poquah Exp $";
d215 2
d1564 1
a1564 1

@


1.146
log
@Remove my capital code dont want it in right now
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.144 2001/03/15 19:10:22 mud Exp $";
d1171 3
@


1.145
log
@change looting for nonclanners
-poq
@
text
@d1433 1
a1433 10
      if (!str_cmp(word,"Name"))
      {
         char *pc;
         ch->name = fread_string( fp );

         for ( pc = name; *pc != '\0'; pc++ )
            ch->name[pc] = LOWER(*pc); 

         ch->name[0] = UPPER(ch->name[0]);
      }
@


1.144
log
@uncomment afk_counter, found structure prob
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.143 2001/03/15 19:04:18 mud Exp $";
d1433 10
a1442 1
      KEY( "Name",  ch->name,   fread_string( fp ) );
@


1.143
log
@comment out afk for a minute
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.142 2001/03/15 18:55:02 mud Exp $";
a766 1
    /*
a767 1
    */
@


1.142
log
@afk counter , you have X messages waiting
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.141 2001/03/03 19:16:36 mud Exp $";
d767 1
d769 1
@


1.141
log
@Fixed format error in LastHost write out
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.140 2000/11/13 15:48:00 mud Exp $";
d767 1
@


1.140
log
@Keys not in inventory don't get wiped.
Clears nasty bug with adding free permanent
affects.
-Rusty
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.139 2000/10/16 23:15:23 mud Exp $";
d289 1
a289 1
       fprintf( fp, "LastHost %s %d~\n", ch->pcdata->last_host);
@


1.139
log
@removed the ~ on the last attacked by timer, dont want to casue a pfile problem
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.138 2000/10/16 23:05:31 mud Exp $";
d608 2
a609 2
            ||   obj->item_type == ITEM_KEY
            ||   (obj->item_type == ITEM_MAP && !obj->value[0])))
d611 1
@


1.138
log
@last attacked by timer giving highbies a two tick chance to kill the lowbie
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.137 2000/08/26 03:26:15 mud Exp $";
d253 1
a253 1
    fprintf( fp, "LstAtkedByTimer %d~\n", ch->pcdata->last_attacked_by_timer );
@


1.137
log
@ fixed major bug with saving of prevOwner field in pfiles
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.136 2000/08/25 16:47:07 mud Exp $";
d253 1
d765 1
d1396 1
@


1.136
log
@ first attempt to add obbj->prev_owner to display who last owned an obj
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.135 2000/08/17 14:29:30 mud Exp $";
d619 1
a619 1
    fprintf( fp, "PrevOwner %s", obj->prev_owner);
@


1.135
log
@ first implementation of "sanction" command for clan leaders
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.134 2000/08/09 21:41:26 mud Exp $";
d619 1
d2145 4
a2148 1
        
@


1.134
log
@remove port from last host
-poQ
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.133 2000/07/22 00:21:26 mud Exp $";
d333 2
d1155 1
a1155 1

@


1.133
log
@forgot to bump up vers
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.132 2000/07/20 17:57:13 mud Exp $";
d288 1
a288 2
       fprintf( fp, "LastHost %s %d~\n", ch->pcdata->last_host,
					 ch->desc->port );
@


1.132
log
@try this and see if it fixes the team plays screwed up
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.131 2000/07/18 18:48:46 mud Exp $";
d218 1
a218 1
    fprintf( fp, "Vers %d\n",   26   );
d1256 1
a1256 1
         if (ch->version > 25)
@


1.131
log
@splitting out gladiator plays
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.130 2000/06/29 18:57:13 mud Exp $";
d218 1
a218 1
    fprintf( fp, "Vers %d\n",   25   );
d1256 1
a1256 10
         if (ch->version < 25)
	 {
	    ch->gladiator_data[GLADIATOR_VICTORIES] = 0;
	    ch->gladiator_data[GLADIATOR_KILLS] = 0;
	    ch->gladiator_data[GLADIATOR_TEAM_VICTORIES] = 0;
	    ch->gladiator_data[GLADIATOR_TEAM_KILLS] = 0;
	    ch->gladiator_data[GLADIATOR_PLAYS] = 0;
	    ch->gladiator_data[GLADIATOR_TEAM_PLAYS] = 0;
	 }
	 else
@


1.130
log
@fix version numbers and gladiator
-poq
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.129 2000/06/28 01:21:12 mud Exp $";
d218 1
a218 1
    fprintf( fp, "Vers %d\n",   24   );
d276 1
a276 1
    fprintf( fp, "Glad %d %d %d %d %d\n", ch->gladiator_data[GLADIATOR_VICTORIES],
d278 2
a279 1
       ch->gladiator_data[GLADIATOR_TEAM_KILLS],ch->gladiator_data[GLADIATOR_PLAYS]);
d791 1
d1256 1
a1256 1
         if (ch->version < 24)
d1263 1
d1272 1
@


1.129
log
@ Added in Demise clan skill confusion
 -Rage.
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: save.c,v 1.128 2000/06/28 00:57:13 mud Exp $";
d218 1
a218 1
    fprintf( fp, "Vers %d\n",   23   );
d1254 9
a1262 4
	 ch->gladiator_data[GLADIATOR_VICTORIES] = fread_number( fp );
	 ch->gladiator_data[GLADIATOR_KILLS] = fread_number( fp );

         if (ch->version > 22)
d1264                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           