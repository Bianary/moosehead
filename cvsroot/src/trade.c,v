head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2003.09.20.18.34.20;	author boogums;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.24.01.27.38;	author guerrand;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.19.19.37.07;	author mud;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.19.19.36.18;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.19.19.35.15;	author rusty;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.19.18.44.00;	author rusty;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.19.03.41.59;	author guerrand;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.17.23.34.52;	author guerrand;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.25.02.11.50;	author boogums;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.24.15.53.55;	author boogums;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.23.02.30.46;	author boogums;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.09.18.45.33;	author mud;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.18.19.51.08;	author mud;	state Exp;
branches;
next	1.2;

1.2
date	99.07.14.18.14.12;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	98.11.10.19.23.47;	author mud;	state Exp;
branches;
next	;


desc
@@


1.15
log
@fixed trade with self bug and aggy check
corey
@
text
@static char rcsid[] = "$Id: trade.c,v 1.14 2001/06/24 01:27:38 guerrand Exp $";
#if defined(macintosh)
#include <types.h>
#else
#include <sys/types.h>
#include <sys/time.h>
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>

#include "merc.h"
#include "recycle.h"

#define     PLR_NOTRADE         0
#define     TRADE_REQUEST       1
#define     TRADE_DECLINE       2
#define     TRADE_ADD           3
#define     TRADE_REMOVE        4
#define     TRADE_APPROVE       5
#define     TRADE_CANCEL        6
#define     TRADE_SHOW          7
#define     TRADE_CLEAR         8
#define     TRADE_ACCEPT        9

/* Import */
DECLARE_DO_FUN( do_help );

OBJ_DATA *get_obj_trade( TRADE_DATA *trade, int trader, char *argument )
{
    OBJ_DATA *obj;

    for ( obj = trade->items[trader] ;
          obj != NULL ;
          obj = obj->next_in_trade )
        if ( is_name( argument, obj->name ) )
            return obj;
    
    return NULL;
}

bool obj_to_trade( OBJ_DATA *obj, TRADE_DATA *trade, int trader )
{
	/* Commented out again
    if ( IS_SET(obj->extra_flags,ITEM_NODROP) )
    	return FALSE;
	 */

    /* no trading Nethermancer Robes */
    if ( obj->pIndexData->vnum == OBJ_VNUM_ROBES )
    	return FALSE;

    obj->next_in_trade = trade->items[trader];
    trade->items[trader] = obj;
    return TRUE;
}

void obj_from_trade( OBJ_DATA *obj, TRADE_DATA *trade, int trader )
{
    OBJ_DATA *tObj;

        if ( trade->items[trader] == obj )
        {
            trade->items[trader] = obj->next_in_trade;
            obj->next_in_trade = NULL;
            return;
        }

        for ( tObj = trade->items[trader] ;
              tObj != NULL;
              tObj = tObj->next_in_trade )
            if ( tObj->next_in_trade == obj )
                break;

        if ( tObj == NULL )
        {
            bug("obj_from_trade: NULL tObj",0);
            return;
        }

        tObj->next_in_trade = obj->next_in_trade;
        obj->next_in_trade = NULL;
        return;
}

void destruct_trade( TRADE_DATA *trade, bool iFree )
{
    int i;
    OBJ_DATA *obj, *obj_next;

        for ( i = 0 ; i < 2 ; i++ )
        {
            trade->trader[i]->gold += trade->gold[i];
            trade->trader[i]->silver += trade->silver[i];
            trade->gold[i] = 0;
            trade->silver[i] = 0;
            trade->approved[i] = 0;

            for ( obj = trade->items[i] ;
                  obj != NULL ;
                  obj = obj_next )
            {
               obj_next = obj->next_in_trade;

               obj->next_in_trade = NULL;
               obj_to_char( obj, trade->trader[i] );
            }
            trade->items[i] = NULL;
        }

	if ( iFree )
	{
	trade->trader[0]->trade = NULL;
	trade->trader[1]->trade = NULL;
	free_trade( trade );
	}
}


void do_trade( CHAR_DATA *ch, char *argument )
{
    TRADE_DATA *trade;
    CHAR_DATA *victim;
    OBJ_DATA *obj, *obj_next;
    int trader;
    char cmd[MAX_INPUT_LENGTH];
    char arg[MAX_INPUT_LENGTH];
    char buf[MAX_STRING_LENGTH];
    int amount = -1;
    int state;

    argument = one_argument( argument, cmd );
    argument = one_argument( argument, arg );

    if ( argument[0] != '\0' && is_number( argument ) )
        amount = atoi( argument );

/*
    if ( cmd[0] == '\0' || arg[0] == '\0' )
    {
        do_help(ch,"trade");
        return;
    }
*/
    /*Added checks below on 21MAY01 - Boogums*/
    /*Yanking the wraithform check until i can get home and look at it*/
    if( is_affected(ch, skill_lookup("wraithform")) )
    {
        send_to_char("You may not trade while in wraith form.\n\r",ch);
        return;
    }
    /*
    victim = get_char_room(ch,arg); 
    if ( victim == ch )
    {
  send_to_char( "That's pointless.\n\r", ch );
  return;
    }

    if( is_affected(victim, skill_lookup("wraithform")) )
    {
        send_to_char("You may not trade with them right now.\n\r",ch);
        return;
    }
    */
    if ( !str_cmp( cmd, "request" ) )
        state = TRADE_REQUEST;
    else
    if ( !str_cmp( cmd, "accept" ) )
        state = TRADE_ACCEPT;
    else
    if ( !str_cmp( cmd, "approve" ) )
        state = TRADE_APPROVE;
    else
    if ( !str_cmp( cmd, "decline" ) )
        state= TRADE_DECLINE;
    else
    if ( !str_cmp( cmd, "add" ) )
        state = TRADE_ADD;
    else
    if ( !str_cmp( cmd, "remove" ) )
        state = TRADE_REMOVE;
    else
    if ( !str_cmp( cmd, "cancel" ) )
        state = TRADE_CANCEL;
    else
    if ( !str_cmp( cmd, "clear" ) )
        state = TRADE_CLEAR;
    else
    if ( !str_cmp( cmd, "view" ) || !str_cmp( cmd, "list" ) ||
         !str_cmp( cmd, "show" ) )
         state = TRADE_SHOW;
    else
    {
        do_help(ch,"trade");
        return;
    }

    /* now for the guts */
    switch( state )
    {
    default:
        bug("do_trade: bad command",0);
        break;

    case TRADE_REQUEST:

        if ( ( victim = get_char_room(ch,arg) ) == NULL )
        {
            send_to_char("That person isn't here.\n\r",ch);
            return;
        }
        if( is_affected(victim, skill_lookup("wraithform")) )
	{
	    send_to_char("You cannot trade with them right now.\n\r",ch);
	    return;
	}

        if ( ch->trade != NULL )
        {
            send_to_char("You are already trading with someone else.\n\r",ch);
            return;
        }

        if ( IS_SET(victim->act, PLR_NOTRADE) )
        {
            act("$N doesn't wish to trade with anybody.",ch,NULL,victim,TO_CHAR,FALSE);
            return;
        }

        if ( victim->trade != NULL )
        {
            act("$N is already trading with somebody.",ch,NULL,victim,TO_CHAR,FALSE);
            return;
        }

        if ( IS_NPC(victim) )
        {
            send_to_char("NPC's don't trade with anybody.\n\r",ch);
            return;
        }

        if ( ch->pcdata->req_trade != NULL )
        {
            act("You haven't answered $N yet.",
                ch,NULL,ch->pcdata->req_trade,TO_CHAR,FALSE);
            return;
        }

        act("You request a trade with $N.",ch,NULL,victim,TO_CHAR,FALSE);
        act("$n requests a trade with you.",ch,NULL,victim,TO_VICT,FALSE);
        
        victim->pcdata->req_trade = ch;
        break;

    case TRADE_ACCEPT:
        if ( ( victim = ch->pcdata->req_trade ) == NULL )    
        {
            send_to_char("No one is trading with you.\n\r",ch);
            return;
        }

        act("You accept the invitation to trade with $N.",
                        ch,NULL,victim,TO_CHAR,FALSE);
        act("$n accepts your invitation to trade.",
                        ch,NULL,victim,TO_VICT,FALSE);
        

        ch->pcdata->req_trade = NULL;

        trade = new_trade();

        trade->trader[0] = ch;
        trade->trader[1] = victim;
        ch->trade = trade;
        victim->trade = trade;
        break;

    case TRADE_DECLINE:
        if ( ( victim = ch->pcdata->req_trade ) == NULL )
        {
            send_to_char("No one has offered to trade with you.\n\r",ch);
            return;
        }

        act("You decline the offer from $N.",ch,NULL,victim,TO_CHAR,FALSE);
        act("$n declines your offer.",ch,NULL,victim,TO_VICT,FALSE);
        ch->pcdata->req_trade = NULL;
        break;

    case TRADE_CANCEL:
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You're not trading with anybody.\n\r",ch);
            return;
        }

        victim = ( trade->trader[0] == ch ? trade->trader[1] :
                                            trade->trader[0] );
       
        destruct_trade( trade, TRUE );

        act("You cancel the trade.",ch,NULL,victim,TO_CHAR,FALSE);
        act("$n has cancelled the trade.",ch,NULL,victim,TO_VICT,FALSE);
        break;        

    case TRADE_CLEAR:
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You're not trading with anybody.\n\r",ch);
            return;
        }

	victim = ( trade->trader[0] == ch ? trade->trader[1] :
					    trade->trader[0] );
        
	destruct_trade( trade, FALSE );
        act("You clear the trade." ,ch,NULL,victim,TO_CHAR,FALSE);
        act("$n has cleared the trade.",ch,NULL,victim,TO_VICT,FALSE);
        break;        

    case TRADE_SHOW:
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You're not trading with anybody.\n\r",ch);
            return;
        }

        /* show trade, find trader */
        trader = ( trade->trader[0] == ch ? 0 : 1 );

        send_to_char("You are offering:\n\r",ch);
        if ( trade->gold[trader] || trade->silver[trader] )
        {
            sprintf(buf,"  * %d gold and %d silver\n\r",
                    trade->gold[trader], trade->silver[trader] );
            send_to_char(buf,ch);
        }
        for ( obj = trade->items[trader] ; 
              obj != NULL ;
              obj = obj->next_in_trade )
            act("   * $p",ch,obj,NULL,TO_CHAR,FALSE);
        send_to_char("\n\rin exchange for:\n\r",ch);
        if ( trade->gold[!trader] || trade->silver[!trader] )
        {
            sprintf(buf,"   * %d gold and %d silver\n\r",
                trade->gold[!trader], trade->silver[!trader] );
            send_to_char(buf,ch);
        }
        for ( obj = trade->items[!trader] ;
              obj != NULL;
              obj = obj->next_in_trade )
           act("   * $p",ch,obj,NULL,TO_CHAR,FALSE);

        break;
        
    case TRADE_APPROVE:
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You are not trading with anybody.\n\r",ch);
            return;
        }

        /* show trade, find trader */
        trader = ( trade->trader[0] == ch ? 0 : 1 );
        victim = ( trade->trader[!trader] );

        trade->approved[trader] = TRUE;

        act("You approve the trade.",ch,NULL,victim,TO_CHAR,FALSE);
        act("$n approves the trade.",ch,NULL,victim,TO_VICT,FALSE);

        if ( trade->approved[!trader] )
        {
            act("The trade is final.",ch,NULL,victim,TO_CHAR,FALSE);
            act("The trade is final.",ch,NULL,victim,TO_VICT,FALSE);

            /* Both people approve */
            ch->gold += trade->gold[!trader];
            ch->silver += trade->silver[!trader];
            victim->gold += trade->gold[trader];
            victim->silver += trade->silver[trader];
            /* Transfer objects */
            for ( obj = trade->items[trader] ;
                  obj != NULL;
                  obj = obj_next )
            {
                obj_next = obj->next_in_trade;

                obj->next_in_trade = NULL;            
                obj_to_char( obj, trade->trader[!trader] );
            }
            
            for ( obj = trade->items[!trader] ;
                  obj != NULL;
                  obj = obj_next )
            {
                obj_next = obj->next_in_trade;

                obj->next_in_trade = NULL;
                obj_to_char( obj, trade->trader[trader] );
            }

	    trade->trader[0]->trade = NULL;
	    trade->trader[1]->trade = NULL;

            free_trade( trade );
            /* DONE! */
         }

        break;

    case TRADE_ADD: /* This is where this begins to suck */
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You are not trading with anybody.\n\r",ch);
            return;
        }
        
        trader = ( trade->trader[0] == ch ? 0 : 1 );
        victim =   trade->trader[!trader];

        /* Always reset approvals */
        trade->approved[0] = FALSE;
        trade->approved[1] = FALSE;

        if ( !str_cmp( arg, "gold" ) )
        {
            if ( amount < 0 )
            {
                send_to_char("You must enter an amount.\n\r",ch);
                return;
            }

            if ( ch->gold < amount )
            {
                send_to_char("You don't have that much.\n\r",ch);
                return;
            }

            trade->gold[trader] += amount;
	    ch->gold -= amount;
            sprintf(buf,"You add %d gold to the trade.",amount);
            act(buf,ch,NULL,victim,TO_CHAR,FALSE);
            sprintf(buf,"$n adds %d gold to the trade.",amount);
            act(buf,ch,NULL,victim,TO_VICT,FALSE);
            return;
        }
        else
        if ( !str_cmp( arg, "silver" ) )
        {
            if ( amount < 0 )
            {
                send_to_char("You must enter an amount.\n\r",ch);
                return;
            }

            if ( ch->silver < amount )
            {
                send_to_char("You don't have that much.\n\r",ch);
                return;
            }

            trade->silver[trader] += amount;
	    ch->silver -= amount;
            sprintf(buf,"You add %d silver to the trade.",amount);
            act(buf,ch,NULL,victim,TO_CHAR,FALSE);
            sprintf(buf,"$n adds %d silver to the trade.",amount);
            act(buf,ch,NULL,victim,TO_VICT,FALSE);
            return;
        }
        else
        if ( ( obj = get_obj_carry(ch,arg) ) == NULL )
        {
            send_to_char("You're not carrying that.\n\r",ch);
            return;
        }

/*
	if ( !can_drop_obj(ch,obj) )
	{
	    send_to_char("You can't let go of it.\n\r",ch);
	    return;
	}
 */

        obj_from_char( obj );
        if ( !obj_to_trade( obj, trade, trader ) )
	    act("You can't trade $p.",ch,obj,victim,TO_CHAR,FALSE);
	else
	{
            act("You add $p to the trade.",ch,obj,victim,TO_CHAR,FALSE);
            act("$n adds $p to the trade.",ch,obj,victim,TO_VICT,FALSE);
	}
        return;

   case TRADE_REMOVE:
        if ( ( trade = ch->trade ) == NULL )
        {
            send_to_char("You are not trading with anybody.\n\r",ch);
            return;
        }

        trader = ( trade->trader[0] == ch ? 0 : 1 );
        victim =   trade->trader[!trader]; 

        /* Always reset approvals */
        trade->approved[0] = FALSE;
        trade->approved[1] = FALSE;

        if ( !str_cmp( arg, "gold" ) )
        {
            if ( amount < 0 )
            {
                send_to_char("You must enter an amount.\n\r",ch);
                return;
            }

            if ( amount > trade->gold[trader] )
            {
                send_to_char("You aren't offering that much.\n\r",ch);
                return;
            }

            trade->gold[trader] -= amount;
            ch->gold += amount;
            sprintf(buf,"You remove %d gold from the trade.",amount);
            act(buf,ch,NULL,victim,TO_CHAR,FALSE);
            sprintf(buf,"$n removes %d gold from the trade.",amount);
            act(buf,ch,NULL,victim,TO_VICT,FALSE);
            return;
        }
        else
        if ( !str_cmp( arg, "silver" ) )
        {
            if ( amount < 0 )
            {
                send_to_char("You must enter an amount.\n\r",ch);
                return;
            }

            if ( amount > trade->silver[trader] )
            {
                send_to_char("You aren't offering that much.\n\r",ch);
                return;
            }

            trade->silver[trader] -= amount;
	    ch->silver += amount;
            sprintf(buf,"You remove %d silver from the trade.",amount);
            act(buf,ch,NULL,victim,TO_CHAR,FALSE);
            sprintf(buf,"$n removes %d silver from the trade.",amount);
            act(buf,ch,NULL,victim,TO_VICT,FALSE);
            return;
        }
        else
        if ( ( obj = get_obj_trade(trade,trader,arg) ) == NULL )
        {
            send_to_char("You aren't offering that.\n\r",ch);
            return;
        }

        /* ok, the obj is what we want to remove */
        obj_from_trade( obj, trade, trader );
        obj_to_char( obj, ch );

        act("You remove $p from the trade.",ch,obj,victim,TO_CHAR,FALSE);
        act("$n removes $p from the trade.",ch,obj,victim,TO_VICT,FALSE);
        break;
    };

    return;
}
@


1.14
log
@Changed Shaman DOTs around, fixed MudTrader.
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.13 2001/06/19 19:37:07 mud Exp $";
d157 6
@


1.13
log
@removed another typo , for ==
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.12 2001/06/19 19:36:18 mud Exp $";
d476 1
d482 1
@


1.12
log
@removed errant )
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.11 2001/06/19 19:35:15 rusty Exp $";
d53 1
a53 1
    if ( obj->pIndexData->vnum,OBJ_VNUM_ROBES )
@


1.11
log
@No more trading Nethermancer Robes
-Rusty
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.10 2001/06/19 18:44:00 rusty Exp $";
d53 1
a53 1
    if ( obj->pIndexData->vnum,OBJ_VNUM_ROBES) )
@


1.10
log
@Can trade nodrops again.  Needed for looting help and enchanters.
-Rusty
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.9 2001/06/19 03:41:59 guerrand Exp $";
d51 4
@


1.9
log
@MudTraded fixed
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.8 2001/06/17 23:34:52 guerrand Exp $";
d47 1
d50 1
@


1.8
log
@Cannot trade NODROP items in MudTrader any more.
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.7 2001/05/25 02:11:50 boogums Exp $";
a469 1
	/*
a474 1
	 */
@


1.7
log
@trying more trader.c fun
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.6 2001/05/24 15:53:55 boogums Exp $";
d45 1
a45 1
void obj_to_trade( OBJ_DATA *obj, TRADE_DATA *trade, int trader )
d47 3
d52 1
a52 1
    return;
d479 7
a485 3
        obj_to_trade( obj, trade, trader );
        act("You add $p to the trade.",ch,obj,victim,TO_CHAR,FALSE);
        act("$n adds $p to the trade.",ch,obj,victim,TO_VICT,FALSE);
@


1.6
log
@Yanking the wraithform checks (just commented out) until i can get home
and do some testing
-Boogums
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.5 2001/05/23 02:30:46 boogums Exp $";
d141 1
a141 1
    /*if( is_affected(ch, skill_lookup("wraithform")) )
d146 1
d201 5
@


1.5
log
@21may01
Adding wraithform checks to trade.c
-Boogums
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.4 2001/04/09 18:45:33 mud Exp $";
d140 2
a141 2

    if( is_affected(ch, skill_lookup("wraithform")) )
d152 1
a152 1

@


1.4
log
@Added the ability to trade nodrop items so that
looted corpses can be given back to owners.
-Rusty
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.3 2000/04/18 19:51:08 mud Exp $";
d139 13
@


1.3
log
@added a BOOL ooc as an extra arg to act() and act_new() to have it
deal properly with the BOOL in can_see() and PERS().
-Rusty
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.2 1999/07/14 18:14:12 mud Exp $";
d448 1
d454 1
@


1.2
log
@Changed the /**/ RCS Id to a static char rcsid[] = "Id";
-Rusty
@
text
@d1 1
a1 1
static char rcsid[] = "$Id: trade.c,v 1.1 1998/11/10 19:23:47 mud Exp $";
d196 1
a196 1
            act("$N doesn't wish to trade with anybody.",ch,NULL,victim,TO_CHAR);
d202 1
a202 1
            act("$N is already trading with somebody.",ch,NULL,victim,TO_CHAR);
d215 1
a215 1
                ch,NULL,ch->pcdata->req_trade,TO_CHAR);
d219 2
a220 2
        act("You request a trade with $N.",ch,NULL,victim,TO_CHAR);
        act("$n requests a trade with you.",ch,NULL,victim,TO_VICT);
d233 1
a233 1
                        ch,NULL,victim,TO_CHAR);
d235 1
a235 1
                        ch,NULL,victim,TO_VICT);
d255 2
a256 2
        act("You decline the offer from $N.",ch,NULL,victim,TO_CHAR);
        act("$n declines your offer.",ch,NULL,victim,TO_VICT);
d272 2
a273 2
        act("You cancel the trade.",ch,NULL,victim,TO_CHAR);
        act("$n has cancelled the trade.",ch,NULL,victim,TO_VICT);
d287 2
a288 2
        act("You clear the trade." ,ch,NULL,victim,TO_CHAR);
        act("$n has cleared the trade.",ch,NULL,victim,TO_VICT);
d311 1
a311 1
            act("   * $p",ch,obj,NULL,TO_CHAR);
d322 1
a322 1
           act("   * $p",ch,obj,NULL,TO_CHAR);
d339 2
a340 2
        act("You approve the trade.",ch,NULL,victim,TO_CHAR);
        act("$n approves the trade.",ch,NULL,victim,TO_VICT);
d344 2
a345 2
            act("The trade is final.",ch,NULL,victim,TO_CHAR);
            act("The trade is final.",ch,NULL,victim,TO_VICT);
d413 1
a413 1
            act(buf,ch,NULL,victim,TO_CHAR);
d415 1
a415 1
            act(buf,ch,NULL,victim,TO_VICT);
d436 1
a436 1
            act(buf,ch,NULL,victim,TO_CHAR);
d438 1
a438 1
            act(buf,ch,NULL,victim,TO_VICT);
d456 2
a457 2
        act("You add $p to the trade.",ch,obj,victim,TO_CHAR);
        act("$n adds $p to the trade.",ch,obj,victim,TO_VICT);
d491 1
a491 1
            act(buf,ch,NULL,victim,TO_CHAR);
d493 1
a493 1
            act(buf,ch,NULL,victim,TO_VICT);
d514 1
a514 1
            act(buf,ch,NULL,victim,TO_CHAR);
d516 1
a516 1
            act(buf,ch,NULL,victim,TO_VICT);
d530 2
a531 2
        act("You remove $p from the trade.",ch,obj,victim,TO_CHAR);
        act("$n removes $p from the trade.",ch,obj,victim,TO_VICT);
@


1.1
log
@Initial insertion of the file.
-Rusty
@
text
@d1 1
a1 1
/* @@(#)$Id: trade.c,v 1.0 1998/10/30 15:27:17 mud Exp $ */
@
